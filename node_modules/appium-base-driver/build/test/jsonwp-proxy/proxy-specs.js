require('source-map-support').install();

/* global describe:true, it:true */

'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _mockRequest = require('./mock-request');

var _mockRequest2 = _interopRequireDefault(_mockRequest);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildReqRes(url, method, body) {
  var req = { originalUrl: url, method: method, body: body };
  var res = {};
  res.headers = {};
  res.set = function (k, v) {
    res[k] = v;
  };
  res.status = function (code) {
    res.sentCode = code;
    return res;
  };
  res.send = function (body) {
    try {
      body = JSON.parse(body);
    } catch (e) {}
    res.sentBody = body;
  };
  return [req, res];
}

function mockProxy() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var proxy = new _.JWProxy(opts);
  proxy.request = function callee$1$0() {
    var args$2$0 = arguments;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_mockRequest2['default'].apply(undefined, args$2$0));

        case 2:
          return context$2$0.abrupt('return', context$2$0.sent);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };
  return proxy;
}

describe('proxy', function () {
  it('should override default params', function () {
    var j = mockProxy({ server: '127.0.0.2' });
    j.server.should.equal('127.0.0.2');
    j.port.should.equal(4444);
  });
  it('should save session id on session creation', function callee$1$0() {
    var j, _ref, _ref2, res, body;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          j = mockProxy();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(j.proxy('/session', 'POST', { desiredCapabilities: {} }));

        case 3:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 2);
          res = _ref2[0];
          body = _ref2[1];

          res.statusCode.should.equal(200);
          body.should.eql({ status: 0, sessionId: '123', value: { browserName: 'boo' } });
          j.sessionId.should.equal('123');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should save session id on session creation with 303', function callee$1$0() {
    var j, _ref3, _ref32, res, body;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          j = mockProxy();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(j.proxy('/session', 'POST', { desiredCapabilities: { redirect: true } }));

        case 3:
          _ref3 = context$2$0.sent;
          _ref32 = _slicedToArray(_ref3, 2);
          res = _ref32[0];
          body = _ref32[1];

          res.statusCode.should.equal(303);
          body.should.eql('http://localhost:4444/wd/hub/session/123');
          j.sessionId.should.equal('123');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  describe('getUrlForProxy', function () {
    it('should modify session id, host, and port', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('http://host.com:1234/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should prepend scheme, host and port if not provided', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should work with urls which do not have session ids', function callee$2$0() {
      var j, newUrl;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('http://host.com:1234/wd/hub/session').should.eql('http://localhost:4444/wd/hub/session');

            newUrl = j.getUrlForProxy('/wd/hub/session');

            newUrl.should.eql('http://localhost:4444/wd/hub/session');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if url requires a sessionId but its null', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            e = undefined;

            try {
              j.getUrlForProxy('/wd/hub/session/456/element/200/value');
            } catch (err) {
              e = err;
            }
            should.exist(e);
            e.message.should.contain('without session id');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not throw an error if url does not require a session id and its null', function callee$2$0() {
      var j, newUrl;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            newUrl = j.getUrlForProxy('/wd/hub/status');

            should.exist(newUrl);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('straight proxy', function () {
    it('should successfully proxy straight', function callee$2$0() {
      var j, _ref4, _ref42, res, body;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.proxy('/status', 'GET'));

          case 3:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 2);
            res = _ref42[0];
            body = _ref42[1];

            res.statusCode.should.equal(200);
            body.should.eql({ status: 0, value: { foo: 'bar' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should pass along request errors', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.proxy('/badurl', 'GET').should.eventually.be.rejectedWith("Could not proxy");

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should proxy error responses and codes', function callee$2$0() {
      var j, _ref5, _ref52, res, body;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.proxy('/element/bad/text', 'GET'));

          case 3:
            _ref5 = context$3$0.sent;
            _ref52 = _slicedToArray(_ref5, 2);
            res = _ref52[0];
            body = _ref52[1];

            res.statusCode.should.equal(500);
            body.should.eql({ status: 11, value: { message: 'Invisible element' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getTimeoutRequestObjects', function () {
    var j = undefined;
    before(function () {
      j = mockProxy();
    });
    it('should take W3C inputs and produce MJSONWP + W3C compatible objects', function callee$2$0() {
      var timeoutObjects;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(j.getTimeoutRequestObjects({ protocol: 'W3C', script: 100 }));

          case 2:
            timeoutObjects = context$3$0.sent;

            timeoutObjects.length.should.equal(1);
            timeoutObjects[0].should.eql({ script: 100, pageLoad: undefined, implicit: undefined, type: 'script', ms: 100 });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should take multiple W3C timeouts and produce multiple MJSONWP + W3C compatible objects', function callee$2$0() {
      var _ref6, _ref62, scriptTimeout, pageLoadTimeout, implicitTimeout, expectedObjBase;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(j.getTimeoutRequestObjects({ protocol: 'W3C', script: 100, pageLoad: 200, implicit: 300 }));

          case 2:
            _ref6 = context$3$0.sent;
            _ref62 = _slicedToArray(_ref6, 3);
            scriptTimeout = _ref62[0];
            pageLoadTimeout = _ref62[1];
            implicitTimeout = _ref62[2];
            expectedObjBase = { script: 100, pageLoad: 200, implicit: 300 };

            scriptTimeout.should.eql(_extends({}, expectedObjBase, {
              type: 'script',
              ms: 100
            }));
            pageLoadTimeout.should.eql(_extends({}, expectedObjBase, {
              type: 'pageLoad',
              ms: 200
            }));
            implicitTimeout.should.eql(_extends({}, expectedObjBase, {
              type: 'implicit',
              ms: 300
            }));

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should create W3C timeouts from MJSONWP inputs', function callee$2$0() {
      var _ref7, _ref72, timeoutObject;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(j.getTimeoutRequestObjects({ protocol: 'MJSONWP', type: 'script', ms: 200 }));

          case 2:
            _ref7 = context$3$0.sent;
            _ref72 = _slicedToArray(_ref7, 1);
            timeoutObject = _ref72[0];

            timeoutObject.should.eql({
              script: 200,
              pageLoad: undefined,
              implicit: undefined,
              type: 'script',
              ms: 200
            });

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('command proxy', function () {
    it('should successfully proxy command', function callee$2$0() {
      var j, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.command('/status', 'GET'));

          case 3:
            res = context$3$0.sent;

            res.should.eql({ foo: 'bar' });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should pass along request errors', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.command('/badurl', 'GET').should.eventually.be.rejectedWith("Could not proxy");

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw when a command fails', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/element/bad/text', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.message.should.contain('Invisible element');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[2, 7]]);
    });
    it('should throw when a command fails with a 200 because the status is not 0', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/element/200/text', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.error.should.eql('element not visible');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[2, 7]]);
    });
    it('should throw when a command fails with a 100', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/session/badchrome/nochrome', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.message.should.contain('chrome not reachable');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[2, 7]]);
    });
  });
  describe('req/res proxy', function () {
    it('should successfully proxy via req and send to res', function callee$2$0() {
      var j, _buildReqRes, _buildReqRes2, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            _buildReqRes = buildReqRes('/status', 'GET');
            _buildReqRes2 = _slicedToArray(_buildReqRes, 2);
            req = _buildReqRes2[0];
            res = _buildReqRes2[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.headers['content-type'].should.equal('application/json; charset=utf-8');
            res.sentCode.should.equal(200);
            res.sentBody.should.eql({ status: 0, value: { foo: 'bar' } });

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should rewrite the inner session id so it doesnt change', function callee$2$0() {
      var j, _buildReqRes3, _buildReqRes32, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes3 = buildReqRes('/element/200/value', 'GET');
            _buildReqRes32 = _slicedToArray(_buildReqRes3, 2);
            req = _buildReqRes32[0];
            res = _buildReqRes32[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: 'foobar', sessionId: '123' });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should rewrite the inner session id with sessionId in url', function callee$2$0() {
      var j, _buildReqRes4, _buildReqRes42, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes4 = buildReqRes('/wd/hub/session/456/element/200/value', 'POST');
            _buildReqRes42 = _slicedToArray(_buildReqRes4, 2);
            req = _buildReqRes42[0];
            res = _buildReqRes42[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: 'foobar', sessionId: '456' });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should pass through urls that do not require session IDs', function callee$2$0() {
      var j, _buildReqRes5, _buildReqRes52, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes5 = buildReqRes('/wd/hub/status', 'GET');
            _buildReqRes52 = _slicedToArray(_buildReqRes5, 2);
            req = _buildReqRes52[0];
            res = _buildReqRes52[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: { 'foo': 'bar' } });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should proxy strange responses', function callee$2$0() {
      var j, _buildReqRes6, _buildReqRes62, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes6 = buildReqRes('/nochrome', 'GET');
            _buildReqRes62 = _slicedToArray(_buildReqRes6, 2);
            req = _buildReqRes62[0];
            res = _buildReqRes62[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentCode.should.equal(100);
            res.sentBody.should.eql({ status: 0, value: { message: 'chrome not reachable' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
