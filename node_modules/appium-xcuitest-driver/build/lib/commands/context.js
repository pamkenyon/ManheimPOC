'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _appiumRemoteDebugger = require('appium-remote-debugger');

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.context);

// override, as appium-ios-driver's version uses UI Automation to close
extensions.closeAlertBeforeTest = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', true);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions._setContext = extensions.setContext;
extensions.setContext = function callee$0$0(name, callback, skipReadyCheck) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this._setContext(name, callback, skipReadyCheck));

      case 2:
        if (!(name && name !== _appiumIosDriver.NATIVE_WIN)) {
          context$1$0.next = 6;
          break;
        }

        if (!(this.logs && this.logs.safariConsole)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole)));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// the appium-ios-driver version of this function fails in CI,
// and the wrong webview is almost always retrieved
extensions._getLatestWebviewContextForTitle = extensions.getLatestWebviewContextForTitle;
extensions.getLatestWebviewContextForTitle = function callee$0$0(regExp) {
  var currentUrl, contexts, matchingCtx, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, ctx, url;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        currentUrl = this.getCurrentUrl();

        if (currentUrl) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this._getLatestWebviewContextForTitle(regExp));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getContextsAndViews());

      case 7:
        contexts = context$1$0.sent;
        matchingCtx = undefined;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(contexts);

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 24;
          break;
        }

        ctx = _step.value;

        if (!ctx.view) {
          context$1$0.next = 21;
          break;
        }

        url = ctx.view.url || '';

        if (!(url === this.getCurrentUrl())) {
          context$1$0.next = 21;
          break;
        }

        matchingCtx = ctx;
        return context$1$0.abrupt('break', 24);

      case 21:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 24:
        context$1$0.next = 30;
        break;

      case 26:
        context$1$0.prev = 26;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 30:
        context$1$0.prev = 30;
        context$1$0.prev = 31;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 33:
        context$1$0.prev = 33;

        if (!_didIteratorError) {
          context$1$0.next = 36;
          break;
        }

        throw _iteratorError;

      case 36:
        return context$1$0.finish(33);

      case 37:
        return context$1$0.finish(30);

      case 38:
        if (!matchingCtx) {
          context$1$0.next = 40;
          break;
        }

        return context$1$0.abrupt('return', matchingCtx.id);

      case 40:
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(this._getLatestWebviewContextForTitle(regExp));

      case 42:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[12, 26, 30, 38], [31,, 33, 37]]);
};

extensions.isWebContext = function () {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function () {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = function callee$0$0() {
  var socketPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.opts.device.getWebInspectorSocket());

      case 2:
        socketPath = context$1$0.sent;
        return context$1$0.abrupt('return', new _appiumRemoteDebugger.RemoteDebugger({
          bundleId: this.opts.bundleId,
          useNewSafari: this.useNewSafari(),
          pageLoadMs: this.pageLoadMs,
          platformVersion: this.opts.platformVersion,
          socketPath: socketPath
        }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} Context
 *
 * @property {string} id - The identifier of the context. The native context
 *                          will be 'NATIVE_APP' and the webviews will be
 *                          'WEBVIEW_xxx'
 * @property {?string} title - The title associated with the webview content
 * @property {?string} url - The url associated with the webview content
 */

/**
 * Get the contexts available, with information about the url and title of each
 * webview
 * @returns {Array} List of Context objects
 */
extensions.mobileGetContexts = function callee$0$0() {
  var curOpt;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        curOpt = this.opts.fullContextList;
        context$1$0.prev = 1;

        // `appium-ios-driver#getContexts` returns the full list of contexts
        // if this option is on
        this.opts.fullContextList = true;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getContexts());

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.prev = 6;

        // reset the option so there are no side effects
        this.opts.fullContextList = curOpt;
        return context$1$0.finish(6);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1,, 6, 9]]);
};

exports['default'] = extensions;
module.exports = exports['default'];

// start safari console logging if the logs handler is active
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OzsrQkFBd0MsbUJBQW1COztvQ0FDNUIsd0JBQXdCOztBQUd2RCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRXBCLGVBQWMsVUFBVSxFQUFFLDZCQUFZLE9BQU8sQ0FBQyxDQUFDOzs7QUFHL0MsVUFBVSxDQUFDLG9CQUFvQixHQUFHOzs7OzRDQUN6QixJQUFJOzs7Ozs7O0NBQ1osQ0FBQzs7QUFFRixVQUFVLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7QUFDL0MsVUFBVSxDQUFDLFVBQVUsR0FBRyxvQkFBZ0IsSUFBSSxFQUFFLFFBQVEsRUFBRSxjQUFjOzs7Ozt5Q0FDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQzs7O2NBR2xELElBQUksSUFBSSxJQUFJLGdDQUFlLENBQUE7Ozs7O2NBQ3pCLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUE7Ozs7Ozt5Q0FDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7O0NBR3JHLENBQUM7Ozs7QUFJRixVQUFVLENBQUMsZ0NBQWdDLEdBQUcsVUFBVSxDQUFDLCtCQUErQixDQUFDO0FBQ3pGLFVBQVUsQ0FBQywrQkFBK0IsR0FBRyxvQkFBZ0IsTUFBTTtNQUM3RCxVQUFVLEVBS1YsUUFBUSxFQUNSLFdBQVcsa0ZBQ04sR0FBRyxFQUVKLEdBQUc7Ozs7O0FBVFAsa0JBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFOztZQUNoQyxVQUFVOzs7Ozs7eUNBQ0EsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozt5Q0FHdkMsSUFBSSxDQUFDLG1CQUFtQixFQUFFOzs7QUFBM0MsZ0JBQVE7QUFDUixtQkFBVzs7Ozs7aUNBQ0MsUUFBUTs7Ozs7Ozs7QUFBZixXQUFHOzthQUNOLEdBQUcsQ0FBQyxJQUFJOzs7OztBQUNOLFdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFOztjQUN4QixHQUFHLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBOzs7OztBQUM5QixtQkFBVyxHQUFHLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUtwQixXQUFXOzs7Ozs0Q0FDTixXQUFXLENBQUMsRUFBRTs7Ozt5Q0FFVixJQUFJLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDOzs7Ozs7Ozs7O0NBQzNELENBQUM7O0FBRUYsVUFBVSxDQUFDLFlBQVksR0FBRyxZQUFZO0FBQ3BDLFNBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyw2QkFBWSxPQUFPLENBQUMsVUFBVSxDQUFDO0NBQ2hGLENBQUM7O0FBRUYsVUFBVSxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQ2pDLFNBQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzVCLENBQUM7O0FBRUYsVUFBVSxDQUFDLG9CQUFvQixHQUFHO01BQzFCLFVBQVU7Ozs7O3lDQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFOzs7QUFBM0Qsa0JBQVU7NENBQ1QseUNBQW1CO0FBQ3hCLGtCQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQzVCLHNCQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRTtBQUNqQyxvQkFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQzNCLHlCQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0FBQzFDLG9CQUFVLEVBQVYsVUFBVTtTQUNYLENBQUM7Ozs7Ozs7Q0FDSCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCRixVQUFVLENBQUMsaUJBQWlCLEdBQUc7TUFDdkIsTUFBTTs7OztBQUFOLGNBQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Ozs7O0FBSXRDLFlBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQzs7eUNBQ3BCLElBQUksQ0FBQyxXQUFXLEVBQUU7Ozs7Ozs7OztBQUcvQixZQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7Ozs7Ozs7O0NBRXRDLENBQUM7O3FCQUdhLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL2NvbnRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpb3NDb21tYW5kcywgTkFUSVZFX1dJTiB9IGZyb20gJ2FwcGl1bS1pb3MtZHJpdmVyJztcbmltcG9ydCB7IFJlbW90ZURlYnVnZ2VyIH0gZnJvbSAnYXBwaXVtLXJlbW90ZS1kZWJ1Z2dlcic7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy5jb250ZXh0KTtcblxuLy8gb3ZlcnJpZGUsIGFzIGFwcGl1bS1pb3MtZHJpdmVyJ3MgdmVyc2lvbiB1c2VzIFVJIEF1dG9tYXRpb24gdG8gY2xvc2VcbmV4dGVuc2lvbnMuY2xvc2VBbGVydEJlZm9yZVRlc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXh0ZW5zaW9ucy5fc2V0Q29udGV4dCA9IGV4dGVuc2lvbnMuc2V0Q29udGV4dDtcbmV4dGVuc2lvbnMuc2V0Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgc2tpcFJlYWR5Q2hlY2spIHtcbiAgYXdhaXQgdGhpcy5fc2V0Q29udGV4dChuYW1lLCBjYWxsYmFjaywgc2tpcFJlYWR5Q2hlY2spO1xuXG4gIC8vIHN0YXJ0IHNhZmFyaSBjb25zb2xlIGxvZ2dpbmcgaWYgdGhlIGxvZ3MgaGFuZGxlciBpcyBhY3RpdmVcbiAgaWYgKG5hbWUgJiYgbmFtZSAhPT0gTkFUSVZFX1dJTikge1xuICAgIGlmICh0aGlzLmxvZ3MgJiYgdGhpcy5sb2dzLnNhZmFyaUNvbnNvbGUpIHtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLnN0YXJ0Q29uc29sZSh0aGlzLmxvZ3Muc2FmYXJpQ29uc29sZS5hZGRMb2dMaW5lLmJpbmQodGhpcy5sb2dzLnNhZmFyaUNvbnNvbGUpKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHRoZSBhcHBpdW0taW9zLWRyaXZlciB2ZXJzaW9uIG9mIHRoaXMgZnVuY3Rpb24gZmFpbHMgaW4gQ0ksXG4vLyBhbmQgdGhlIHdyb25nIHdlYnZpZXcgaXMgYWxtb3N0IGFsd2F5cyByZXRyaWV2ZWRcbmV4dGVuc2lvbnMuX2dldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGUgPSBleHRlbnNpb25zLmdldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGU7XG5leHRlbnNpb25zLmdldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGUgPSBhc3luYyBmdW5jdGlvbiAocmVnRXhwKSB7XG4gIGxldCBjdXJyZW50VXJsID0gdGhpcy5nZXRDdXJyZW50VXJsKCk7XG4gIGlmICghY3VycmVudFVybCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlKHJlZ0V4cCk7XG4gIH1cblxuICBsZXQgY29udGV4dHMgPSBhd2FpdCB0aGlzLmdldENvbnRleHRzQW5kVmlld3MoKTtcbiAgbGV0IG1hdGNoaW5nQ3R4O1xuICBmb3IgKGxldCBjdHggb2YgY29udGV4dHMpIHtcbiAgICBpZiAoY3R4LnZpZXcpIHtcbiAgICAgIGxldCB1cmwgPSBjdHgudmlldy51cmwgfHwgJyc7XG4gICAgICBpZiAodXJsID09PSB0aGlzLmdldEN1cnJlbnRVcmwoKSkge1xuICAgICAgICBtYXRjaGluZ0N0eCA9IGN0eDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChtYXRjaGluZ0N0eCkge1xuICAgIHJldHVybiBtYXRjaGluZ0N0eC5pZDtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5fZ2V0TGF0ZXN0V2Vidmlld0NvbnRleHRGb3JUaXRsZShyZWdFeHApO1xufTtcblxuZXh0ZW5zaW9ucy5pc1dlYkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuY3VyQ29udGV4dCAmJiB0aGlzLmN1ckNvbnRleHQgIT09IGlvc0NvbW1hbmRzLmNvbnRleHQuTkFUSVZFX1dJTjtcbn07XG5cbmV4dGVuc2lvbnMuaXNXZWJ2aWV3ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc1dlYkNvbnRleHQoKTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0TmV3UmVtb3RlRGVidWdnZXIgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNvY2tldFBhdGggPSBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmdldFdlYkluc3BlY3RvclNvY2tldCgpO1xuICByZXR1cm4gbmV3IFJlbW90ZURlYnVnZ2VyKHtcbiAgICBidW5kbGVJZDogdGhpcy5vcHRzLmJ1bmRsZUlkLFxuICAgIHVzZU5ld1NhZmFyaTogdGhpcy51c2VOZXdTYWZhcmkoKSxcbiAgICBwYWdlTG9hZE1zOiB0aGlzLnBhZ2VMb2FkTXMsXG4gICAgcGxhdGZvcm1WZXJzaW9uOiB0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uLFxuICAgIHNvY2tldFBhdGgsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDb250ZXh0XG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNvbnRleHQuIFRoZSBuYXRpdmUgY29udGV4dFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgJ05BVElWRV9BUFAnIGFuZCB0aGUgd2Vidmlld3Mgd2lsbCBiZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICdXRUJWSUVXX3h4eCdcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdGl0bGUgLSBUaGUgdGl0bGUgYXNzb2NpYXRlZCB3aXRoIHRoZSB3ZWJ2aWV3IGNvbnRlbnRcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdXJsIC0gVGhlIHVybCBhc3NvY2lhdGVkIHdpdGggdGhlIHdlYnZpZXcgY29udGVudFxuICovXG5cbi8qKlxuICogR2V0IHRoZSBjb250ZXh0cyBhdmFpbGFibGUsIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVybCBhbmQgdGl0bGUgb2YgZWFjaFxuICogd2Vidmlld1xuICogQHJldHVybnMge0FycmF5fSBMaXN0IG9mIENvbnRleHQgb2JqZWN0c1xuICovXG5leHRlbnNpb25zLm1vYmlsZUdldENvbnRleHRzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCBjdXJPcHQgPSB0aGlzLm9wdHMuZnVsbENvbnRleHRMaXN0O1xuICB0cnkge1xuICAgIC8vIGBhcHBpdW0taW9zLWRyaXZlciNnZXRDb250ZXh0c2AgcmV0dXJucyB0aGUgZnVsbCBsaXN0IG9mIGNvbnRleHRzXG4gICAgLy8gaWYgdGhpcyBvcHRpb24gaXMgb25cbiAgICB0aGlzLm9wdHMuZnVsbENvbnRleHRMaXN0ID0gdHJ1ZTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDb250ZXh0cygpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIHJlc2V0IHRoZSBvcHRpb24gc28gdGhlcmUgYXJlIG5vIHNpZGUgZWZmZWN0c1xuICAgIHRoaXMub3B0cy5mdWxsQ29udGV4dExpc3QgPSBjdXJPcHQ7XG4gIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
