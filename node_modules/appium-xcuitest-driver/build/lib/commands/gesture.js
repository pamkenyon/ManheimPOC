'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _appiumIosDriver = require('appium-ios-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var helpers = {},
    extensions = {},
    commands = {};

commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;

commands.mobileShake = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isSimulator()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Shake is not supported on real devices');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.opts.device.shake());

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.click = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.nativeClick(el));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        el = _appiumSupport.util.unwrapElement(el);
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.settings.getSettings());

      case 7:
        if (!context$1$0.sent.nativeWebTap) {
          context$1$0.next = 13;
          break;
        }

        // atoms-based clicks don't always work in safari 7
        _logger2['default'].debug('Using native web tap');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.nativeWebTap(el));

      case 11:
        context$1$0.next = 17;
        break;

      case 13:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.executeAtom('click', [atomsElement]));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function gesturesChainToString(gestures) {
  var keysToInclude = arguments.length <= 1 || arguments[1] === undefined ? ['options'] : arguments[1];

  return gestures.map(function (item) {
    var otherKeys = _lodash2['default'].difference(_lodash2['default'].keys(item), ['action']);
    otherKeys = _lodash2['default'].isArray(keysToInclude) ? _lodash2['default'].intersection(otherKeys, keysToInclude) : otherKeys;
    if (otherKeys.length) {
      return '' + item.action + ('(' + _lodash2['default'].map(otherKeys, function (x) {
        return x + '=' + (_lodash2['default'].isPlainObject(item[x]) ? JSON.stringify(item[x]) : item[x]);
      }).join(', ') + ')');
    }
    return item.action;
  }).join('-');
}

commands.performActions = function callee$0$0(actions) {
  var preprocessedActions;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received the following W3C actions: ' + JSON.stringify(actions, null, '  '));
        // This is mandatory, since WDA only supports TOUCH pointer type
        // and Selenium API uses MOUSE as the default one
        preprocessedActions = actions.map(function (action) {
          return _Object$assign({}, action, action.type === 'pointer' ? {
            parameters: {
              pointerType: 'touch'
            }
          } : {});
        });

        _logger2['default'].debug('Preprocessed actions: ' + JSON.stringify(preprocessedActions, null, '  '));
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/actions', 'POST', { actions: preprocessedActions }));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performTouch = function callee$0$0(gestures) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received the following touch action: ' + gesturesChainToString(gestures));
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/touch/perform', 'POST', { actions: gestures }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performMultiAction = function callee$0$0(actions) {
  var i;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received the following multi touch action:');
        for (i in actions) {
          _logger2['default'].debug('    ' + (parseInt(i, 10) + 1) + ': ' + _lodash2['default'].map(actions[i], 'action').join('-'));
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/touch/multi/perform', 'POST', { actions: actions }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.nativeClick = function callee$0$0(el) {
  var endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);
        endpoint = '/element/' + el + '/click';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', {}));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/*
 * See https://github.com/facebook/WebDriverAgent/blob/master/WebDriverAgentLib/Commands/FBElementCommands.m
 * to get the info about available WDA gestures API
 *
 * See https://developer.apple.com/reference/xctest/xcuielement and
 * https://developer.apple.com/reference/xctest/xcuicoordinate to get the detailed description of
 * all XCTest gestures
*/

helpers.mobileScroll = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var swipe = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var params, msg, element, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (opts.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeApplication', false));

      case 3:
        opts.element = context$1$0.sent;

      case 4:
        params = {};

        if (opts.name && !swipe) {
          params.name = opts.name;
        } else if (opts.direction) {
          if (['up', 'down', 'left', 'right'].indexOf(opts.direction.toLowerCase()) < 0) {
            msg = 'Direction must be up, down, left or right';

            _logger2['default'].errorAndThrow(msg);
          }
          params.direction = opts.direction;
        } else if (opts.predicateString && !swipe) {
          params.predicateString = opts.predicateString;
        } else if (opts.toVisible && !swipe) {
          params.toVisible = opts.toVisible;
        } else {
          msg = swipe ? 'Mobile swipe requires direction' : 'Mobile scroll supports the following strategies: name, direction, predicateString, and toVisible. Specify one of these';

          _logger2['default'].errorAndThrow(msg);
        }

        // we can also optionally pass a distance which appears to be a ratio of
        // screen height, so 1.0 means a full screen's worth of scrolling
        if (!swipe && opts.distance) {
          params.distance = opts.distance;
        }

        element = opts.element.ELEMENT || opts.element;
        endpoint = '/wda/element/' + element + '/' + (swipe ? 'swipe' : 'scroll');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileSwipe = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.mobileScroll(opts, true));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function parseFloatParameter(paramName, paramValue, methodName) {
  if (_lodash2['default'].isUndefined(paramValue)) {
    _logger2['default'].errorAndThrow('"' + paramName + '" parameter is mandatory for "' + methodName + '" call');
  }
  var result = parseFloat(paramValue);
  if (isNaN(result)) {
    _logger2['default'].errorAndThrow('"' + paramName + '" parameter should be a valid number. "' + paramValue + '" is given instead');
  }
  return result;
}

helpers.mobilePinch = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (opts.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeApplication', false));

      case 3:
        opts.element = context$1$0.sent;

      case 4:
        params = {
          scale: parseFloatParameter('scale', opts.scale, 'pinch'),
          velocity: parseFloatParameter('velocity', opts.velocity, 'pinch')
        };
        el = opts.element.ELEMENT || opts.element;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/pinch', 'POST', params));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileDoubleTap = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var el, params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!opts.element) {
          context$1$0.next = 5;
          break;
        }

        el = opts.element.ELEMENT || opts.element;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/doubleTap', 'POST'));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        params = {
          x: parseFloatParameter('x', opts.x, 'doubleTap'),
          y: parseFloatParameter('y', opts.y, 'doubleTap')
        };
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/doubleTap', 'POST', params));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileTwoFingerTap = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (opts.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeApplication', false));

      case 3:
        opts.element = context$1$0.sent;

      case 4:
        el = opts.element.ELEMENT || opts.element;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/twoFingerTap', 'POST'));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileTouchAndHold = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          duration: parseFloatParameter('duration', opts.duration, 'touchAndHold')
        };

        if (!opts.element) {
          context$1$0.next = 6;
          break;
        }

        el = opts.element.ELEMENT || opts.element;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/touchAndHold', 'POST', params));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        // Long tap coordinates
        params.x = parseFloatParameter('x', opts.x, 'touchAndHold');
        params.y = parseFloatParameter('y', opts.y, 'touchAndHold');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/touchAndHold', 'POST', params));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileTap = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          x: parseFloatParameter('x', opts.x, 'tap'),
          y: parseFloatParameter('y', opts.y, 'tap')
        };
        el = opts.element ? opts.element.ELEMENT || opts.element : '0';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/tap/' + el, 'POST', params));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileDragFromToForDuration = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          duration: parseFloatParameter('duration', opts.duration, 'dragFromToForDuration'),
          fromX: parseFloatParameter('fromX', opts.fromX, 'dragFromToForDuration'),
          fromY: parseFloatParameter('fromY', opts.fromY, 'dragFromToForDuration'),
          toX: parseFloatParameter('toX', opts.toX, 'dragFromToForDuration'),
          toY: parseFloatParameter('toY', opts.toY, 'dragFromToForDuration')
        };

        if (!opts.element) {
          context$1$0.next = 6;
          break;
        }

        el = opts.element.ELEMENT || opts.element;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/dragfromtoforduration', 'POST', params));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/dragfromtoforduration', 'POST', params));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileSelectPickerWheelValue = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var el, params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!opts.element) {
          _logger2['default'].errorAndThrow('Element id is expected to be set for selectPickerWheelValue method');
        }
        if (!_lodash2['default'].isString(opts.order) || ['next', 'previous'].indexOf(opts.order.toLowerCase()) === -1) {
          _logger2['default'].errorAndThrow('The mandatory "order" parameter is expected to be equal either to \'next\' or \'previous\'. ' + ('\'' + opts.order + '\' is given instead'));
        }
        el = opts.element.ELEMENT || opts.element;
        params = { order: opts.order };

        if (opts.offset) {
          params.offset = parseFloatParameter('offset', opts.offset, 'selectPickerWheelValue');
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/pickerwheel/' + el + '/select', 'POST', params));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getCoordinates = function callee$0$0(gesture) {
  var el, coordinates, optionX, optionY, rect, pos, size, offsetX, offsetY;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = gesture.options.element;
        coordinates = { x: 0, y: 0, areOffsets: false };
        optionX = null;

        if (gesture.options.x) {
          optionX = parseFloatParameter('x', gesture.options.x, 'getCoordinates');
        }
        optionY = null;

        if (gesture.options.y) {
          optionY = parseFloatParameter('y', gesture.options.y, 'getCoordinates');
        }

        // figure out the element coordinates.

        if (!el) {
          context$1$0.next = 19;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getRect(el));

      case 9:
        rect = context$1$0.sent;
        pos = { x: rect.x, y: rect.y };
        size = { w: rect.width, h: rect.height };
        offsetX = 0;
        offsetY = 0;

        // get the real offsets
        if (optionX || optionY) {
          offsetX = optionX || 0;
          offsetY = optionY || 0;
        } else {
          offsetX = size.w / 2;
          offsetY = size.h / 2;
        }

        // apply the offsets
        coordinates.x = pos.x + offsetX;
        coordinates.y = pos.y + offsetY;
        context$1$0.next = 22;
        break;

      case 19:
        // moveTo coordinates are passed in as offsets
        coordinates.areOffsets = gesture.action === 'moveTo';
        coordinates.x = optionX || 0;
        coordinates.y = optionY || 0;

      case 22:
        return context$1$0.abrupt('return', coordinates);

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.applyMoveToOffset = function (firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

_Object$assign(extensions, helpers, commands);
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
exports.gesturesChainToString = gesturesChainToString;
exports['default'] = extensions;

// there are multiple commands that map here, so manually proxy

// WDA supports four scrolling strategies: predication based on name, direction,
// predicateString, and toVisible, in that order. Swiping requires direction.

// Double tap element

// Double tap coordinates

// Long tap element

// Drag element

// Drag coordinates

// defaults

// defaults
//# sourceMappingURL=data:application/json;charset=utf8;base64,
