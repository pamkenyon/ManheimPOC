require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _2 = require('..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _helpers = require('./helpers');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('exec', function () {
  it('should work with arguments like spawn', function callee$1$0() {
    var cmd, args, _ref, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = 'ls';
          args = [__dirname];
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, args));

        case 4:
          _ref = context$2$0.sent;
          stdout = _ref.stdout;
          stderr = _ref.stderr;
          code = _ref.code;

          stdout.should.contain("exec-specs.js");
          stderr.should.equal("");
          code.should.equal(0);

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should throw an error if command does not exist', function callee$1$0() {
    var cmd, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = 'doesnoteexist';
          err = undefined;
          context$2$0.prev = 2;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd));

        case 5:
          context$2$0.next = 10;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](2);

          err = context$2$0.t0;

        case 10:
          should.exist(err);
          err.message.should.include('not found');

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[2, 7]]);
  });

  it('should throw an error with a bad exit code', function callee$1$0() {
    var cmd, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("bad_exit");
          err = undefined;
          context$2$0.prev = 2;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd));

        case 5:
          context$2$0.next = 10;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](2);

          err = context$2$0.t0;

        case 10:
          should.exist(err);
          err.stdout.trim().should.equal("foo");
          err.stderr.trim().should.equal("bar");
          err.code.should.equal(1);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[2, 7]]);
  });

  it('should work with spaces in arguments', function callee$1$0() {
    var cmd, echo1, echo2, _ref2, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo");
          echo1 = "my name is bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref2 = context$2$0.sent;
          stdout = _ref2.stdout;
          stderr = _ref2.stderr;
          code = _ref2.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should work with backslashes in arguments', function callee$1$0() {
    var cmd, echo1, echo2, _ref3, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo");
          echo1 = "my\\ name\\ is\\ bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref3 = context$2$0.sent;
          stdout = _ref3.stdout;
          stderr = _ref3.stderr;
          code = _ref3.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should work with spaces in commands', function callee$1$0() {
    var cmd, echo1, echo2, _ref4, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo with space");
          echo1 = "bobbob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref4 = context$2$0.sent;
          stdout = _ref4.stdout;
          stderr = _ref4.stderr;
          code = _ref4.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should work with spaces in commands and arguments', function callee$1$0() {
    var cmd, echo1, echo2, _ref5, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo with space");
          echo1 = "my name is bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref5 = context$2$0.sent;
          stdout = _ref5.stdout;
          stderr = _ref5.stderr;
          code = _ref5.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should respect cwd', function callee$1$0() {
    var cmd, echo1, echo2, cwd, _ref6, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = _appiumSupport.system.isWindows() ? "echo.bat" : "./echo.sh";
          echo1 = "my name is bob";
          echo2 = "lol";
          cwd = _path2['default'].dirname((0, _helpers.getFixture)("echo"));
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1, echo2], { cwd: cwd }));

        case 6:
          _ref6 = context$2$0.sent;
          stdout = _ref6.stdout;
          stderr = _ref6.stderr;
          code = _ref6.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should respect env', function callee$1$0() {
    var cmd, env, _ref7, stdout, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("env");
          env = { FOO: "lolol" };
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [], { env: env }));

        case 4:
          _ref7 = context$2$0.sent;
          stdout = _ref7.stdout;
          code = _ref7.code;

          stdout.trim().should.equal(env.FOO + ' ' + env.FOO);
          code.should.equal(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should allow a timeout parameter', function callee$1$0() {
    var cmd, args, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = "sleep";
          args = ["10"];
          err = undefined;
          context$2$0.prev = 3;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, args, { timeout: 500 }));

        case 6:
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](3);

          err = context$2$0.t0;

        case 11:
          should.exist(err);
          err.message.should.contain("timed out");
          err.message.should.contain(cmd);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[3, 8]]);
  });

  it('should allow large amounts of output', function callee$1$0() {
    var _ref8, stdout;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.timeout(24000);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _2.exec)((0, _helpers.getFixture)("bigbuffer.js")));

        case 3:
          _ref8 = context$2$0.sent;
          stdout = _ref8.stdout;

          stdout.length.should.be.above(512 * 1024);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should ignore output if requested', function callee$1$0() {
    var cmd, echo1, _ref9, stdout, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo.sh");
          echo1 = "my name is bob";
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1], { ignoreOutput: true }));

        case 4:
          _ref9 = context$2$0.sent;
          stdout = _ref9.stdout;
          code = _ref9.code;

          stdout.should.equal("");
          code.should.equal(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should return a Buffer if requested', function callee$1$0() {
    var cmd, echo1, _ref10, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo.sh");
          echo1 = "my name is bob";
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.exec)(cmd, [echo1], { isBuffer: true }));

        case 4:
          _ref10 = context$2$0.sent;
          stdout = _ref10.stdout;
          stderr = _ref10.stderr;
          code = _ref10.code;

          _lodash2['default'].isString(stdout).should.be['false'];
          _lodash2['default'].isBuffer(stdout).should.be['true'];
          _lodash2['default'].isString(stderr).should.be['false'];
          _lodash2['default'].isBuffer(stderr).should.be['true'];
          code.should.equal(0);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('binary output', function () {
    var PNG_MAGIC = '89504e47';
    var PNG_MAGIC_LENGTH = 4;

    it('should allow binary output', function callee$2$0() {
      var _ref11, stdout, signature;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _2.exec)('cat', [(0, _helpers.getFixture)('screenshot.png')], { encoding: 'binary' }));

          case 2:
            _ref11 = context$3$0.sent;
            stdout = _ref11.stdout;

            _lodash2['default'].isString(stdout).should.be['true'];
            _lodash2['default'].isBuffer(stdout).should.be['false'];
            signature = Buffer.from(stdout, 'binary').toString('hex', 0, PNG_MAGIC_LENGTH);

            signature.should.eql(PNG_MAGIC);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should allow binary output as Buffer', function callee$2$0() {
      var _ref12, stdout, signature;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _2.exec)('cat', [(0, _helpers.getFixture)('screenshot.png')], { encoding: 'binary', isBuffer: true }));

          case 2:
            _ref12 = context$3$0.sent;
            stdout = _ref12.stdout;

            _lodash2['default'].isString(stdout).should.be['false'];
            _lodash2['default'].isBuffer(stdout).should.be['true'];
            signature = stdout.toString('hex', 0, PNG_MAGIC_LENGTH);

            signature.should.eql(PNG_MAGIC);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should allow binary output from timeout', function callee$2$0() {
      var stdout;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.prev = 0;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _2.exec)('cat', [(0, _helpers.getFixture)('screenshot.png')], { encoding: 'binary', timeout: 1 }));

          case 3:
            context$3$0.next = 10;
            break;

          case 5:
            context$3$0.prev = 5;
            context$3$0.t0 = context$3$0['catch'](0);
            stdout = context$3$0.t0.stdout;

            _lodash2['default'].isString(stdout).should.be['true'];
            _lodash2['default'].isBuffer(stdout).should.be['false'];

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[0, 5]]);
    });

    it('should allow binary output as Buffer from timeout', function callee$2$0() {
      var stdout;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.prev = 0;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _2.exec)('cat', [(0, _helpers.getFixture)('screenshot.png')], { encoding: 'binary', timeout: 1, isBuffer: true }));

          case 3:
            context$3$0.next = 10;
            break;

          case 5:
            context$3$0.prev = 5;
            context$3$0.t0 = context$3$0['catch'](0);
            stdout = context$3$0.t0.stdout;

            _lodash2['default'].isString(stdout).should.be['false'];
            _lodash2['default'].isBuffer(stdout).should.be['true'];

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[0, 5]]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
