'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _imageUtil = require('./image-util');

var _mjpegConsumer = require('mjpeg-consumer');

var _mjpegConsumer2 = _interopRequireDefault(_mjpegConsumer);

var _mjpegServer = require('mjpeg-server');

var _mjpegServer2 = _interopRequireDefault(_mjpegServer);

var _stream = require('stream');

var TEST_IMG_JPG = '/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAAeAAD/4QOBaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0MCA3OS4xNjA0NTEsIDIwMTcvMDUvMDYtMDE6MDg6MjEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlDMzI3QkY0N0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlDMzI3QkYzN0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE4IChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjRmOTg3NTk3LWRhNjMtNGNjNC05MzQzLTRmMjY4MzBlMDY5NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEABALCwsMCxAMDBAXDw0PFxsUEBAUGx8XFxcXFx8eFxoaGhoXHh4jJSclIx4vLzMzLy9AQEBAQEBAQEBAQEBAQEABEQ8PERMRFRISFRQRFBEUGhQWFhQaJhoaHBoaJjAjHh4eHiMwKy4nJycuKzU1MDA1NUBAP0BAQEBAQEBAQEBAQP/AABEIACAAIAMBIgACEQEDEQH/xABgAAEAAwEAAAAAAAAAAAAAAAAABAUHCAEBAAAAAAAAAAAAAAAAAAAAABAAAQMCAgsAAAAAAAAAAAAAAAECBBEDEgYhMRODo7PTVAUWNhEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8Az8AAdAAAAAAI8+fE8dEuTZtzZR7VMb6OdTE5GJoYirrUp/e8qd9wb3TGe/lJ2551sx8D/9k=';

// amount of time to wait for the first image in the stream
var MJPEG_SERVER_TIMEOUT_MS = 10000;

/** Class which stores the last bit of data streamed into it */

var MJpegStream = (function (_Writable) {
  _inherits(MJpegStream, _Writable);

  /**
   * Create an MJpegStream
   * @param {string} mJpegUrl - URL of MJPEG-over-HTTP stream
   * @param {function} [errorHandler=noop] - additional function that will be
   * called in the case of any errors.
   * @param {object} [options={}] - Options to pass to the Writable constructor
   */

  function MJpegStream(mJpegUrl) {
    var errorHandler = arguments.length <= 1 || arguments[1] === undefined ? _lodash2['default'].noop : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, MJpegStream);

    _get(Object.getPrototypeOf(MJpegStream.prototype), 'constructor', this).call(this, options);
    this.errorHandler = errorHandler;
    this.url = mJpegUrl;
    this.clear();
  }

  /**
   * Start an mjpeg server for the purpose of testing, which just sends the same
   * image over and over. Caller is responsible for closing the server.
   * @param {int} port - port the server should listen on
   * @param {int} [intMs] - how often the server should push an image
   * @param {int} [times] - how many times the server should push an image before
   * it closes the connection
   * @returns {http.Server}
   */

  /**
   * Get the base64-encoded version of the JPEG
   * @returns {string}
   */

  _createClass(MJpegStream, [{
    key: 'lastChunkPNG',

    /**
     * Get the PNG version of the JPEG buffer
     * @returns {Buffer} PNG image data
     */
    value: function lastChunkPNG() {
      var jpg;
      return _regeneratorRuntime.async(function lastChunkPNG$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_lodash2['default'].isBuffer(this.lastChunk)) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', null);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _imageUtil.getJimpImage)(this.lastChunk));

          case 4:
            jpg = context$2$0.sent;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(jpg.getBuffer(_imageUtil.MIME_PNG));

          case 7:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get the base64-encoded version of the PNG
     * @returns {string}
     */
  }, {
    key: 'lastChunkPNGBase64',
    value: function lastChunkPNGBase64() {
      var png;
      return _regeneratorRuntime.async(function lastChunkPNGBase64$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.lastChunkPNG());

          case 2:
            png = context$2$0.sent;

            if (png) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', null);

          case 5:
            return context$2$0.abrupt('return', png.toString('base64'));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Reset internal state
     */
  }, {
    key: 'clear',
    value: function clear() {
      this.registerStartSuccess = null;
      this.registerStartFailure = null;
      this.request = null;
      this.consumer = null;
      this.lastChunk = null;
      this.updateCount = 0;
    }

    /**
     * Start reading the MJpeg stream and storing the last image
     */
  }, {
    key: 'start',
    value: function start() {
      var serverTimeout = arguments.length <= 0 || arguments[0] === undefined ? MJPEG_SERVER_TIMEOUT_MS : arguments[0];
      var startPromise, onErr;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // ensure we're not started already
            this.stop();

            this.consumer = new _mjpegConsumer2['default']();

            // use the deferred pattern so we can wait for the start of the stream
            // based on what comes in from an external pipe
            startPromise = new _bluebird2['default'](function (res, rej) {
              _this.registerStartSuccess = res;
              _this.registerStartFailure = rej;
            })
            // start a timeout so that if the server does not return data, we don't
            // block forever.
            .timeout(serverTimeout, 'Waited ' + serverTimeout + 'ms but the MJPEG server never sent any images');

            onErr = function onErr(err) {
              _logger2['default'].error('Error getting MJpeg screenshot chunk: ' + err);
              _this.errorHandler(err);
              if (_this.registerStartFailure) {
                _this.registerStartFailure(err);
              }
            };

            this.request = (0, _request2['default'])(this.url);

            this.request.on('error', onErr) // ensure we do something with errors
            .pipe(this.consumer) // allow chunking and transforming of jpeg data
            .pipe(this); // send the actual jpegs to ourself

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(startPromise);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Stop reading the MJpeg stream. Ensure we disconnect all the pipes and stop
     * the HTTP request itself. Then reset the state.
     */
  }, {
    key: 'stop',
    value: function stop() {
      if (!this.consumer) {
        return;
      }

      this.consumer.unpipe();
      this.request.end();
      this.clear();
    }

    /**
     * Override the Writable write() method in order to save the last image and
     * log the number of images we have received
     * @override
     * @param {Buffer} data - binary data streamed from the MJpeg consumer
     */
  }, {
    key: 'write',
    value: function write(data) {
      this.lastChunk = data;
      this.updateCount++;

      if (this.registerStartSuccess) {
        this.registerStartSuccess();
        this.registerStartSuccess = null;
      }
    }
  }, {
    key: 'lastChunkBase64',
    get: function get() {
      return _lodash2['default'].isBuffer(this.lastChunk) ? this.lastChunk.toString('base64') : null;
    }
  }]);

  return MJpegStream;
})(_stream.Writable);

function initMJpegServer(port) {
  var intMs = arguments.length <= 1 || arguments[1] === undefined ? 300 : arguments[1];
  var times = arguments.length <= 2 || arguments[2] === undefined ? 20 : arguments[2];

  var server = _http2['default'].createServer(function callee$1$0(req, res) {
    var mJpegReqHandler, jpg, i;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mJpegReqHandler = _mjpegServer2['default'].createReqHandler(req, res);
          jpg = Buffer.from(TEST_IMG_JPG, 'base64');
          i = 0;

        case 3:
          if (!(i < times)) {
            context$2$0.next = 10;
            break;
          }

          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(intMs));

        case 6:
          mJpegReqHandler._write(jpg, null, _lodash2['default'].noop);

        case 7:
          i++;
          context$2$0.next = 3;
          break;

        case 10:
          mJpegReqHandler.close();

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  }).listen(port);

  return server;
}

exports.MJpegStream = MJpegStream;
exports.initMJpegServer = initMJpegServer;
exports.TEST_IMG_JPG = TEST_IMG_JPG;

// just send the same jpeg over and over
//# sourceMappingURL=data:application/json;charset=utf8;base64,
