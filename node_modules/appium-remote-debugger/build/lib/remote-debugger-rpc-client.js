'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bplistCreator = require('bplist-creator');

var _bplistCreator2 = _interopRequireDefault(_bplistCreator);

var _bplistParser = require('bplist-parser');

var _bplistParser2 = _interopRequireDefault(_bplistParser);

var _bufferpack = require('bufferpack');

var _bufferpack2 = _interopRequireDefault(_bufferpack);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _remoteDebugger = require('./remote-debugger');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _remoteDebuggerMessageHandler = require('./remote-debugger-message-handler');

var _remoteDebuggerMessageHandler2 = _interopRequireDefault(_remoteDebuggerMessageHandler);

var _remoteMessages = require('./remote-messages');

var _remoteMessages2 = _interopRequireDefault(_remoteMessages);

var RemoteDebuggerRpcClient = (function () {
  function RemoteDebuggerRpcClient() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, RemoteDebuggerRpcClient);

    var _opts$host = opts.host;
    var host = _opts$host === undefined ? '::1' : _opts$host;
    var _opts$port = opts.port;
    var port = _opts$port === undefined ? _remoteDebugger.REMOTE_DEBUGGER_PORT : _opts$port;
    var socketPath = opts.socketPath;
    var _opts$specialMessageHandlers = opts.specialMessageHandlers;
    var specialMessageHandlers = _opts$specialMessageHandlers === undefined ? {} : _opts$specialMessageHandlers;
    var messageProxyPort = opts.messageProxyPort;
    var messageProxySocketPath = opts.messageProxySocketPath;

    // host/port config for TCP communication, socketPath for unix domain sockets
    this.host = host;
    this.port = port;
    this.socketPath = socketPath;
    this.messageProxyPort = messageProxyPort;
    this.messageProxySocketPath = messageProxySocketPath;

    this.socket = null;
    this.connected = false;
    this.connId = _uuid2['default'].v4();
    this.senderId = _uuid2['default'].v4();
    this.curMsgId = 0;
    this.received = Buffer.alloc(0);
    this.readPos = 0;

    // message handlers
    this.specialMessageHandlers = specialMessageHandlers;
    this.messageHandler = null;
  }

  _createClass(RemoteDebuggerRpcClient, [{
    key: 'connect',
    value: function connect() {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.messageHandler = new _remoteDebuggerMessageHandler2['default'](this.specialMessageHandlers);

            // create socket and handle its messages
            if (this.socketPath) {
              if (this.messageProxySocketPath) {
                // unix domain socket via proxy
                _logger2['default'].debug('Connecting to remote debugger via proxy through unix domain socket: \'' + this.messageProxySocketPath + '\'');
                this.socket = _net2['default'].connect(this.messageProxySocketPath);

                // Forward the actual socketPath to the proxy
                this.socket.once('connect', function () {
                  _logger2['default'].debug('Forwarding the actual web inspector socket to the proxy: \'' + _this.socketPath + '\'');
                  _this.socket.write(JSON.stringify({ socketPath: _this.socketPath }));
                });
              } else {
                // unix domain socket
                _logger2['default'].debug('Connecting to remote debugger through unix domain socket: \'' + this.socketPath + '\'');
                this.socket = _net2['default'].connect(this.socketPath);
              }
            } else {
              if (this.messageProxyPort) {
                // connect to the proxy instead of the remote debugger directly
                this.port = this.messageProxyPort;
              }

              // tcp socket
              _logger2['default'].debug('Connecting to remote debugger ' + (this.messageProxyPort ? 'via proxy ' : '') + 'through TCP: ' + this.host + ':' + this.port);
              this.socket = new _net2['default'].Socket({ type: 'tcp6' });
              this.socket.connect(this.port, this.host);
            }

            this.socket.setNoDelay(true);
            this.socket.on('close', function () {
              if (_this.connected) {
                _logger2['default'].debug('Debugger socket disconnected');
              }
              _this.connected = false;
              _this.socket = null;
            });
            this.socket.on('end', function () {
              _this.connected = false;
            });
            this.socket.on('data', this.receive.bind(this));

            // connect the socket
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              // only resolve this function when we are actually connected
              _this.socket.on('connect', function callee$3$0() {
                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      _logger2['default'].debug('Debugger socket connected');
                      this.connected = true;

                      resolve();

                    case 3:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this);
              });
              _this.socket.on('error', function (err) {
                if (_this.connected) {
                  _logger2['default'].error('Socket error: ' + err.message);
                  _this.connected = false;
                }

                // the connection was refused, so reject the connect promise
                reject(err);
              });
            }));

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      return _regeneratorRuntime.async(function disconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.isConnected()) {
              _logger2['default'].debug('Disconnecting from remote debugger');
              this.socket.destroy();
            }
            this.connected = false;

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this.connected;
    }
  }, {
    key: 'setSpecialMessageHandler',
    value: function setSpecialMessageHandler(key, errorHandler, handler) {
      this.messageHandler.setSpecialMessageHandler(key, errorHandler, handler);
    }
  }, {
    key: 'getSpecialMessageHandler',
    value: function getSpecialMessageHandler(key) {
      return this.messageHandler.getSpecialMessageHandler(key);
    }
  }, {
    key: 'setDataMessageHandler',
    value: function setDataMessageHandler(key, errorHandler, handler) {
      this.messageHandler.setDataMessageHandler(key, errorHandler, handler);
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      this.messageHandler.allowNavigationWithoutReload(allow);
    }
  }, {
    key: 'selectApp',
    value: function selectApp(appIdKey, applicationConnectedHandler) {
      return _regeneratorRuntime.async(function selectApp$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              // local callback, temporarily added as callback to
              // `_rpc_applicationConnected:` remote debugger response
              // to handle the initial connection
              var onAppChange = function onAppChange(dict) {
                var oldAppIdKey, correctAppIdKey;
                return _regeneratorRuntime.async(function onAppChange$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
                      correctAppIdKey = dict.WIRApplicationIdentifierKey;

                      // if this is a report of a proxy redirect from the remote debugger
                      // we want to update our dictionary and get a new app id
                      if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
                        _logger2['default'].debug('We were notified we might have connected to the wrong app. ' + ('Using id ' + correctAppIdKey + ' instead of ' + oldAppIdKey));
                      }

                      applicationConnectedHandler(dict);
                      reject('New application has connected');

                    case 5:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this2);
              };
              _this2.setSpecialMessageHandler('_rpc_applicationConnected:', reject, onAppChange);

              // do the actual connecting to the app
              return (function callee$3$0() {
                var _ref, _ref2, connectedAppIdKey, pageDict, msg;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.next = 2;
                      return _regeneratorRuntime.awrap(this.send('connectToApp', {
                        appIdKey: appIdKey
                      }));

                    case 2:
                      _ref = context$4$0.sent;
                      _ref2 = _slicedToArray(_ref, 2);
                      connectedAppIdKey = _ref2[0];
                      pageDict = _ref2[1];

                      // sometimes the connect logic happens, but with an empty dictionary
                      // which leads to the remote debugger getting disconnected, and into a loop
                      if (_lodash2['default'].isEmpty(pageDict)) {
                        msg = 'Empty page dictionary received';

                        _logger2['default'].debug(msg);
                        reject(new Error(msg));
                      } else {
                        resolve([connectedAppIdKey, pageDict]);
                      }

                    case 7:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this2);
              })();
            })['finally'](function () {
              // no matter what, we want to restore the handler that was changed.
              _this2.setSpecialMessageHandler('_rpc_applicationConnected:', null, applicationConnectedHandler);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'send',
    value: function send(command) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var onSocketError;
      return _regeneratorRuntime.async(function send$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            onSocketError = undefined;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              // promise to be resolved whenever remote debugger
              // replies to our request

              // retrieve the correct command to send
              opts = _lodash2['default'].defaults({ connId: _this3.connId, senderId: _this3.senderId }, opts);
              var data = (0, _remoteMessages2['default'])(command, opts);

              // most of the time we don't care when socket.write does
              // so give it an empty function
              var socketCb = _lodash2['default'].noop;

              // handle socket problems
              onSocketError = function (exception) {
                if (_this3.connected) {
                  _logger2['default'].error('Socket error: ' + exception.message);
                }

                // the connection was refused, so reject the connect promise
                reject(exception);
              };
              _this3.socket.on('error', onSocketError);
              if (_this3.messageHandler.hasSpecialMessageHandler(data.__selector)) {
                (function () {
                  // special replies will return any number of arguments
                  // temporarily wrap with promise handling
                  var specialMessageHandler = _this3.getSpecialMessageHandler(data.__selector);
                  _this3.setSpecialMessageHandler(data.__selector, reject, (function () {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }

                    _logger2['default'].debug('Received response from socket send: \'' + _lodash2['default'].truncate(JSON.stringify(args), { length: 50 }) + '\'');

                    // call the original listener, and put it back, if necessary
                    specialMessageHandler.apply(undefined, args);
                    if (this.messageHandler.hasSpecialMessageHandler(data.__selector)) {
                      // this means that the system has not removed this listener
                      this.setSpecialMessageHandler(data.__selector, null, specialMessageHandler);
                    }

                    resolve(args);
                  }).bind(_this3));
                })();
              } else if (data.__argument && data.__argument.WIRSocketDataKey) {
                // keep track of the messages coming and going using
                // a simple sequential id
                _this3.curMsgId++;

                var errorHandler = function errorHandler(err) {
                  var msg = 'Remote debugger error with code \'' + err.code + '\': ' + err.message;
                  reject(new Error(msg));
                };

                _this3.setDataMessageHandler(_this3.curMsgId.toString(), errorHandler, function (value) {
                  var msg = _lodash2['default'].truncate(_lodash2['default'].isString(value) ? value : JSON.stringify(value), { length: 50 });
                  _logger2['default'].debug('Received data response from socket send: \'' + msg + '\'');
                  _logger2['default'].debug('Original command: ' + command);
                  resolve(value);
                });
                data.__argument.WIRSocketDataKey.id = _this3.curMsgId;
                data.__argument.WIRSocketDataKey = Buffer.from(JSON.stringify(data.__argument.WIRSocketDataKey));
              } else {
                // we want to immediately resolve this socket.write
                // any long term callbacks will do their business in the background
                socketCb = resolve;
              }

              _logger2['default'].debug('Sending \'' + data.__selector + '\' message to remote debugger');

              // remote debugger expects a binary plist as data
              var plist = undefined;
              try {
                plist = (0, _bplistCreator2['default'])(data);
              } catch (e) {
                var msg = 'Could not create binary plist from data: ' + e.message;
                _logger2['default'].error(msg);
                return reject(new Error(msg));
              }

              if (_this3.socket && _this3.connected) {
                // cork and uncork in order to not buffer the write
                // on some systems this is necessary or the server
                // gets confused.
                _this3.socket.cork();
                _this3.socket.write(_bufferpack2['default'].pack('L', [plist.length]));
                _this3.socket.write(plist, socketCb);
                _this3.socket.uncork();
              } else {
                var msg = 'Attempted to write data to socket after it was closed!';
                _logger2['default'].error(msg);
                reject(new Error(msg));
              }
            })['finally'](function () {
              // remove this listener, so we don't exhaust the system
              _this3.socket.removeListener('error', onSocketError);
            }));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receive',
    value: function receive(data) {
      // Append this new data to the existing Buffer
      this.received = Buffer.concat([this.received, data]);
      var dataLeftOver = true;

      // Parse multiple messages in the same packet
      while (dataLeftOver) {
        // Store a reference to where we were
        var oldReadPos = this.readPos;

        // Read the prefix (plist length) to see how far to read next
        // It's always 4 bytes long
        var prefix = this.received.slice(this.readPos, this.readPos + 4);

        var msgLength = undefined;
        try {
          msgLength = _bufferpack2['default'].unpack('L', prefix)[0];
        } catch (e) {
          _logger2['default'].error('Buffer could not unpack: ' + e);
          return;
        }

        // Jump forward 4 bytes
        this.readPos += 4;

        // Is there enough data here?
        // If not, jump back to our original position and gtfo
        if (this.received.length < msgLength + this.readPos) {
          this.readPos = oldReadPos;
          break;
        }

        // Extract the main body of the message (where the plist should be)
        var body = this.received.slice(this.readPos, msgLength + this.readPos);

        // Extract the plist
        var plist = undefined;
        try {
          plist = _bplistParser2['default'].parseBuffer(body);
        } catch (e) {
          _logger2['default'].error('Error parsing binary plist: ' + e);
          return;
        }

        // bplistParse.parseBuffer returns an array
        if (plist.length === 1) {
          plist = plist[0];
        }

        var _arr = ['WIRMessageDataKey', 'WIRDestinationKey', 'WIRSocketDataKey'];
        for (var _i = 0; _i < _arr.length; _i++) {
          var key = _arr[_i];
          if (!_lodash2['default'].isUndefined(plist[key])) {
            plist[key] = plist[key].toString("utf8");
          }
        }

        // Jump forward the length of the plist
        this.readPos += msgLength;

        // Calculate how much buffer is left
        var leftOver = this.received.length - this.readPos;

        // Is there some left over?
        if (leftOver !== 0) {
          // Copy what's left over into a new buffer, and save it for next time
          var chunk = Buffer.alloc(leftOver);
          this.received.copy(chunk, 0, this.readPos);
          this.received = chunk;
        } else {
          // Otherwise, empty the buffer and get out of the loop
          this.received = Buffer.alloc(0);
          dataLeftOver = false;
        }

        // Reset the read position
        this.readPos = 0;

        // Now do something with the plist
        if (plist) {
          this.messageHandler.handleMessage(plist);
        }
      }
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
      this.messageHandler.setTimelineEventHandler(timelineEventHandler);
    }
  }, {
    key: 'setConsoleLogEventHandler',
    value: function setConsoleLogEventHandler(consoleEventHandler) {
      this.consoleEventHandler = consoleEventHandler;
      this.messageHandler.setConsoleLogEventHandler(consoleEventHandler);
    }
  }, {
    key: 'setNetworkLogEventHandler',
    value: function setNetworkLogEventHandler(networkEventHandler) {
      this.networkEventHandler = networkEventHandler;
      this.messageHandler.setNetworkEventHandler(networkEventHandler);
    }
  }]);

  return RemoteDebuggerRpcClient;
})();

exports['default'] = RemoteDebuggerRpcClient;
module.exports = exports['default'];

// from the dictionary returned, get the ids

// error listener, which needs to be removed after the promise is resolved
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZW1vdGUtZGVidWdnZXItcnBjLWNsaWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3NCQUFnQixVQUFVOzs7O3NCQUNaLFFBQVE7Ozs7NkJBQ0csZ0JBQWdCOzs7OzRCQUNqQixlQUFlOzs7OzBCQUNoQixZQUFZOzs7O3dCQUNmLFVBQVU7Ozs7OEJBQ08sbUJBQW1COztvQkFDdkMsTUFBTTs7OzttQkFDUCxLQUFLOzs7OzRDQUNTLG1DQUFtQzs7Ozs4QkFDcEMsbUJBQW1COzs7O0lBRzNCLHVCQUF1QjtBQUM5QixXQURPLHVCQUF1QixHQUNsQjtRQUFYLElBQUkseURBQUcsRUFBRTs7MEJBREgsdUJBQXVCOztxQkFTcEMsSUFBSSxDQU5OLElBQUk7UUFBSixJQUFJLDhCQUFHLEtBQUs7cUJBTVYsSUFBSSxDQUxOLElBQUk7UUFBSixJQUFJO1FBQ0osVUFBVSxHQUlSLElBQUksQ0FKTixVQUFVO3VDQUlSLElBQUksQ0FITixzQkFBc0I7UUFBdEIsc0JBQXNCLGdEQUFHLEVBQUU7UUFDM0IsZ0JBQWdCLEdBRWQsSUFBSSxDQUZOLGdCQUFnQjtRQUNoQixzQkFBc0IsR0FDcEIsSUFBSSxDQUROLHNCQUFzQjs7O0FBSXhCLFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFFBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzdCLFFBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUN6QyxRQUFJLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7O0FBRXJELFFBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQUksQ0FBQyxNQUFNLEdBQUcsa0JBQUssRUFBRSxFQUFFLENBQUM7QUFDeEIsUUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFB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SyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0MsY0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDdkIsTUFBTTs7QUFFTCxjQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsc0JBQVksR0FBRyxLQUFLLENBQUM7U0FDdEI7OztBQUdELFlBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDOzs7QUFHakIsWUFBSSxLQUFLLEVBQUU7QUFDVCxjQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQztPQUNGO0tBQ0Y7OztXQUV1QixpQ0FBQyxvQkFBb0IsRUFBRTtBQUM3QyxVQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7QUFDakQsVUFBSSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ25FOzs7V0FFeUIsbUNBQUMsbUJBQW1CLEVBQUU7QUFDOUMsVUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0FBQy9DLFVBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQUNwRTs7O1dBRXlCLG1DQUFDLG1CQUFtQixFQUFFO0FBQzlDLFVBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztBQUMvQyxVQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLENBQUM7S0FDakU7OztTQTdXa0IsdUJBQXVCOzs7cUJBQXZCLHVCQUF1QiIsImZpbGUiOiJsaWIvcmVtb3RlLWRlYnVnZ2VyLXJwYy1jbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgYnBsaXN0Q3JlYXRlIGZyb20gJ2JwbGlzdC1jcmVhdG9yJztcbmltcG9ydCBicGxpc3RQYXJzZSBmcm9tICdicGxpc3QtcGFyc2VyJztcbmltcG9ydCBidWZmZXJwYWNrIGZyb20gJ2J1ZmZlcnBhY2snO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgUkVNT1RFX0RFQlVHR0VSX1BPUlQgfSBmcm9tICcuL3JlbW90ZS1kZWJ1Z2dlcic7XG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCBScGNNZXNzYWdlSGFuZGxlciBmcm9tICcuL3JlbW90ZS1kZWJ1Z2dlci1tZXNzYWdlLWhhbmRsZXInO1xuaW1wb3J0IGdldFJlbW90ZUNvbW1hbmQgZnJvbSAnLi9yZW1vdGUtbWVzc2FnZXMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbW90ZURlYnVnZ2VyUnBjQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhvc3QgPSAnOjoxJyxcbiAgICAgIHBvcnQgPSBSRU1PVEVfREVCVUdHRVJfUE9SVCxcbiAgICAgIHNvY2tldFBhdGgsXG4gICAgICBzcGVjaWFsTWVzc2FnZUhhbmRsZXJzID0ge30sXG4gICAgICBtZXNzYWdlUHJveHlQb3J0LFxuICAgICAgbWVzc2FnZVByb3h5U29ja2V0UGF0aFxuICAgIH0gPSBvcHRzO1xuXG4gICAgLy8gaG9zdC9wb3J0IGNvbmZpZyBmb3IgVENQIGNvbW11bmljYXRpb24sIHNvY2tldFBhdGggZm9yIHVuaXggZG9tYWluIHNvY2tldHNcbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgdGhpcy5zb2NrZXRQYXRoID0gc29ja2V0UGF0aDtcbiAgICB0aGlzLm1lc3NhZ2VQcm94eVBvcnQgPSBtZXNzYWdlUHJveHlQb3J0O1xuICAgIHRoaXMubWVzc2FnZVByb3h5U29ja2V0UGF0aCA9IG1lc3NhZ2VQcm94eVNvY2tldFBhdGg7XG5cbiAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5JZCA9IHV1aWQudjQoKTtcbiAgICB0aGlzLnNlbmRlcklkID0gdXVpZC52NCgpO1xuICAgIHRoaXMuY3VyTXNnSWQgPSAwO1xuICAgIHRoaXMucmVjZWl2ZWQgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgdGhpcy5yZWFkUG9zID0gMDtcblxuICAgIC8vIG1lc3NhZ2UgaGFuZGxlcnNcbiAgICB0aGlzLnNwZWNpYWxNZXNzYWdlSGFuZGxlcnMgPSBzcGVjaWFsTWVzc2FnZUhhbmRsZXJzO1xuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIgPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCAoKSB7XG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlciA9IG5ldyBScGNNZXNzYWdlSGFuZGxlcih0aGlzLnNwZWNpYWxNZXNzYWdlSGFuZGxlcnMpO1xuXG4gICAgLy8gY3JlYXRlIHNvY2tldCBhbmQgaGFuZGxlIGl0cyBtZXNzYWdlc1xuICAgIGlmICh0aGlzLnNvY2tldFBhdGgpIHtcbiAgICAgIGlmICh0aGlzLm1lc3NhZ2VQcm94eVNvY2tldFBhdGgpIHtcbiAgICAgICAgLy8gdW5peCBkb21haW4gc29ja2V0IHZpYSBwcm94eVxuICAgICAgICBsb2cuZGVidWcoYENvbm5lY3RpbmcgdG8gcmVtb3RlIGRlYnVnZ2VyIHZpYSBwcm94eSB0aHJvdWdoIHVuaXggZG9tYWluIHNvY2tldDogJyR7dGhpcy5tZXNzYWdlUHJveHlTb2NrZXRQYXRofSdgKTtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBuZXQuY29ubmVjdCh0aGlzLm1lc3NhZ2VQcm94eVNvY2tldFBhdGgpO1xuXG4gICAgICAgIC8vIEZvcndhcmQgdGhlIGFjdHVhbCBzb2NrZXRQYXRoIHRvIHRoZSBwcm94eVxuICAgICAgICB0aGlzLnNvY2tldC5vbmNlKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhgRm9yd2FyZGluZyB0aGUgYWN0dWFsIHdlYiBpbnNwZWN0b3Igc29ja2V0IHRvIHRoZSBwcm94eTogJyR7dGhpcy5zb2NrZXRQYXRofSdgKTtcbiAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZShKU09OLnN0cmluZ2lmeSh7c29ja2V0UGF0aDogdGhpcy5zb2NrZXRQYXRofSkpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdW5peCBkb21haW4gc29ja2V0XG4gICAgICAgIGxvZy5kZWJ1ZyhgQ29ubmVjdGluZyB0byByZW1vdGUgZGVidWdnZXIgdGhyb3VnaCB1bml4IGRvbWFpbiBzb2NrZXQ6ICcke3RoaXMuc29ja2V0UGF0aH0nYCk7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV0LmNvbm5lY3QodGhpcy5zb2NrZXRQYXRoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubWVzc2FnZVByb3h5UG9ydCkge1xuICAgICAgICAvLyBjb25uZWN0IHRvIHRoZSBwcm94eSBpbnN0ZWFkIG9mIHRoZSByZW1vdGUgZGVidWdnZXIgZGlyZWN0bHlcbiAgICAgICAgdGhpcy5wb3J0ID0gdGhpcy5tZXNzYWdlUHJveHlQb3J0O1xuICAgICAgfVxuXG4gICAgICAvLyB0Y3Agc29ja2V0XG4gICAgICBsb2cuZGVidWcoYENvbm5lY3RpbmcgdG8gcmVtb3RlIGRlYnVnZ2VyICR7dGhpcy5tZXNzYWdlUHJveHlQb3J0ID8gJ3ZpYSBwcm94eSAnIDogJyd9dGhyb3VnaCBUQ1A6ICR7dGhpcy5ob3N0fToke3RoaXMucG9ydH1gKTtcbiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IG5ldC5Tb2NrZXQoe3R5cGU6ICd0Y3A2J30pO1xuICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCh0aGlzLnBvcnQsIHRoaXMuaG9zdCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb2NrZXQuc2V0Tm9EZWxheSh0cnVlKTtcbiAgICB0aGlzLnNvY2tldC5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdEZWJ1Z2dlciBzb2NrZXQgZGlzY29ubmVjdGVkJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zb2NrZXQgPSBudWxsO1xuICAgIH0pO1xuICAgIHRoaXMuc29ja2V0Lm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHRoaXMuc29ja2V0Lm9uKCdkYXRhJywgdGhpcy5yZWNlaXZlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gY29ubmVjdCB0aGUgc29ja2V0XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIG9ubHkgcmVzb2x2ZSB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGNvbm5lY3RlZFxuICAgICAgdGhpcy5zb2NrZXQub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgRGVidWdnZXIgc29ja2V0IGNvbm5lY3RlZGApO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNvY2tldC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgIGxvZy5lcnJvcihgU29ja2V0IGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgY29ubmVjdGlvbiB3YXMgcmVmdXNlZCwgc28gcmVqZWN0IHRoZSBjb25uZWN0IHByb21pc2VcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRpc2Nvbm5lY3QgKCkge1xuICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnRGlzY29ubmVjdGluZyBmcm9tIHJlbW90ZSBkZWJ1Z2dlcicpO1xuICAgICAgdGhpcy5zb2NrZXQuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgaXNDb25uZWN0ZWQgKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3RlZDtcbiAgfVxuXG4gIHNldFNwZWNpYWxNZXNzYWdlSGFuZGxlciAoa2V5LCBlcnJvckhhbmRsZXIsIGhhbmRsZXIpIHtcbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNldFNwZWNpYWxNZXNzYWdlSGFuZGxlcihrZXksIGVycm9ySGFuZGxlciwgaGFuZGxlcik7XG4gIH1cblxuICBnZXRTcGVjaWFsTWVzc2FnZUhhbmRsZXIgKGtleSkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLmdldFNwZWNpYWxNZXNzYWdlSGFuZGxlcihrZXkpO1xuICB9XG5cbiAgc2V0RGF0YU1lc3NhZ2VIYW5kbGVyIChrZXksIGVycm9ySGFuZGxlciwgaGFuZGxlcikge1xuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuc2V0RGF0YU1lc3NhZ2VIYW5kbGVyKGtleSwgZXJyb3JIYW5kbGVyLCBoYW5kbGVyKTtcbiAgfVxuXG4gIGFsbG93TmF2aWdhdGlvbldpdGhvdXRSZWxvYWQgKGFsbG93ID0gdHJ1ZSkge1xuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuYWxsb3dOYXZpZ2F0aW9uV2l0aG91dFJlbG9hZChhbGxvdyk7XG4gIH1cblxuICBhc3luYyBzZWxlY3RBcHAgKGFwcElkS2V5LCBhcHBsaWNhdGlvbkNvbm5lY3RlZEhhbmRsZXIpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gbG9jYWwgY2FsbGJhY2ssIHRlbXBvcmFyaWx5IGFkZGVkIGFzIGNhbGxiYWNrIHRvXG4gICAgICAvLyBgX3JwY19hcHBsaWNhdGlvbkNvbm5lY3RlZDpgIHJlbW90ZSBkZWJ1Z2dlciByZXNwb25zZVxuICAgICAgLy8gdG8gaGFuZGxlIHRoZSBpbml0aWFsIGNvbm5lY3Rpb25cbiAgICAgIGxldCBvbkFwcENoYW5nZSA9IGFzeW5jIChkaWN0KSA9PiB7XG4gICAgICAgIC8vIGZyb20gdGhlIGRpY3Rpb25hcnkgcmV0dXJuZWQsIGdldCB0aGUgaWRzXG4gICAgICAgIGxldCBvbGRBcHBJZEtleSA9IGRpY3QuV0lSSG9zdEFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgICAgICAgbGV0IGNvcnJlY3RBcHBJZEtleSA9IGRpY3QuV0lSQXBwbGljYXRpb25JZGVudGlmaWVyS2V5O1xuXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYSByZXBvcnQgb2YgYSBwcm94eSByZWRpcmVjdCBmcm9tIHRoZSByZW1vdGUgZGVidWdnZXJcbiAgICAgICAgLy8gd2Ugd2FudCB0byB1cGRhdGUgb3VyIGRpY3Rpb25hcnkgYW5kIGdldCBhIG5ldyBhcHAgaWRcbiAgICAgICAgaWYgKG9sZEFwcElkS2V5ICYmIGNvcnJlY3RBcHBJZEtleSAhPT0gb2xkQXBwSWRLZXkpIHtcbiAgICAgICAgICBsb2cuZGVidWcoYFdlIHdlcmUgbm90aWZpZWQgd2UgbWlnaHQgaGF2ZSBjb25uZWN0ZWQgdG8gdGhlIHdyb25nIGFwcC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBVc2luZyBpZCAke2NvcnJlY3RBcHBJZEtleX0gaW5zdGVhZCBvZiAke29sZEFwcElkS2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwbGljYXRpb25Db25uZWN0ZWRIYW5kbGVyKGRpY3QpO1xuICAgICAgICByZWplY3QoJ05ldyBhcHBsaWNhdGlvbiBoYXMgY29ubmVjdGVkJyk7XG4gICAgICB9O1xuICAgICAgdGhpcy5zZXRTcGVjaWFsTWVzc2FnZUhhbmRsZXIoJ19ycGNfYXBwbGljYXRpb25Db25uZWN0ZWQ6JywgcmVqZWN0LCBvbkFwcENoYW5nZSk7XG5cbiAgICAgIC8vIGRvIHRoZSBhY3R1YWwgY29ubmVjdGluZyB0byB0aGUgYXBwXG4gICAgICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IFtjb25uZWN0ZWRBcHBJZEtleSwgcGFnZURpY3RdID0gYXdhaXQgdGhpcy5zZW5kKCdjb25uZWN0VG9BcHAnLCB7XG4gICAgICAgICAgYXBwSWRLZXlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc29tZXRpbWVzIHRoZSBjb25uZWN0IGxvZ2ljIGhhcHBlbnMsIGJ1dCB3aXRoIGFuIGVtcHR5IGRpY3Rpb25hcnlcbiAgICAgICAgLy8gd2hpY2ggbGVhZHMgdG8gdGhlIHJlbW90ZSBkZWJ1Z2dlciBnZXR0aW5nIGRpc2Nvbm5lY3RlZCwgYW5kIGludG8gYSBsb29wXG4gICAgICAgIGlmIChfLmlzRW1wdHkocGFnZURpY3QpKSB7XG4gICAgICAgICAgbGV0IG1zZyA9ICdFbXB0eSBwYWdlIGRpY3Rpb25hcnkgcmVjZWl2ZWQnO1xuICAgICAgICAgIGxvZy5kZWJ1Zyhtc2cpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IobXNnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShbY29ubmVjdGVkQXBwSWRLZXksIHBhZ2VEaWN0XSk7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAvLyBubyBtYXR0ZXIgd2hhdCwgd2Ugd2FudCB0byByZXN0b3JlIHRoZSBoYW5kbGVyIHRoYXQgd2FzIGNoYW5nZWQuXG4gICAgICB0aGlzLnNldFNwZWNpYWxNZXNzYWdlSGFuZGxlcignX3JwY19hcHBsaWNhdGlvbkNvbm5lY3RlZDonLCBudWxsLCBhcHBsaWNhdGlvbkNvbm5lY3RlZEhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2VuZCAoY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gICAgLy8gZXJyb3IgbGlzdGVuZXIsIHdoaWNoIG5lZWRzIHRvIGJlIHJlbW92ZWQgYWZ0ZXIgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWRcbiAgICBsZXQgb25Tb2NrZXRFcnJvcjtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdoZW5ldmVyIHJlbW90ZSBkZWJ1Z2dlclxuICAgICAgLy8gcmVwbGllcyB0byBvdXIgcmVxdWVzdFxuXG4gICAgICAvLyByZXRyaWV2ZSB0aGUgY29ycmVjdCBjb21tYW5kIHRvIHNlbmRcbiAgICAgIG9wdHMgPSBfLmRlZmF1bHRzKHtjb25uSWQ6IHRoaXMuY29ubklkLCBzZW5kZXJJZDogdGhpcy5zZW5kZXJJZH0sIG9wdHMpO1xuICAgICAgbGV0IGRhdGEgPSBnZXRSZW1vdGVDb21tYW5kKGNvbW1hbmQsIG9wdHMpO1xuXG4gICAgICAvLyBtb3N0IG9mIHRoZSB0aW1lIHdlIGRvbid0IGNhcmUgd2hlbiBzb2NrZXQud3JpdGUgZG9lc1xuICAgICAgLy8gc28gZ2l2ZSBpdCBhbiBlbXB0eSBmdW5jdGlvblxuICAgICAgbGV0IHNvY2tldENiID0gXy5ub29wO1xuXG4gICAgICAvLyBoYW5kbGUgc29ja2V0IHByb2JsZW1zXG4gICAgICBvblNvY2tldEVycm9yID0gKGV4Y2VwdGlvbikgPT4ge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoYFNvY2tldCBlcnJvcjogJHtleGNlcHRpb24ubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBjb25uZWN0aW9uIHdhcyByZWZ1c2VkLCBzbyByZWplY3QgdGhlIGNvbm5lY3QgcHJvbWlzZVxuICAgICAgICByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnNvY2tldC5vbignZXJyb3InLCBvblNvY2tldEVycm9yKTtcbiAgICAgIGlmICh0aGlzLm1lc3NhZ2VIYW5kbGVyLmhhc1NwZWNpYWxNZXNzYWdlSGFuZGxlcihkYXRhLl9fc2VsZWN0b3IpKSB7XG4gICAgICAgIC8vIHNwZWNpYWwgcmVwbGllcyB3aWxsIHJldHVybiBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50c1xuICAgICAgICAvLyB0ZW1wb3JhcmlseSB3cmFwIHdpdGggcHJvbWlzZSBoYW5kbGluZ1xuICAgICAgICBsZXQgc3BlY2lhbE1lc3NhZ2VIYW5kbGVyID0gdGhpcy5nZXRTcGVjaWFsTWVzc2FnZUhhbmRsZXIoZGF0YS5fX3NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5zZXRTcGVjaWFsTWVzc2FnZUhhbmRsZXIoZGF0YS5fX3NlbGVjdG9yLCByZWplY3QsIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGBSZWNlaXZlZCByZXNwb25zZSBmcm9tIHNvY2tldCBzZW5kOiAnJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KGFyZ3MpLCB7bGVuZ3RoOiA1MH0pfSdgKTtcblxuICAgICAgICAgIC8vIGNhbGwgdGhlIG9yaWdpbmFsIGxpc3RlbmVyLCBhbmQgcHV0IGl0IGJhY2ssIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgIHNwZWNpYWxNZXNzYWdlSGFuZGxlciguLi5hcmdzKTtcbiAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlSGFuZGxlci5oYXNTcGVjaWFsTWVzc2FnZUhhbmRsZXIoZGF0YS5fX3NlbGVjdG9yKSkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBzeXN0ZW0gaGFzIG5vdCByZW1vdmVkIHRoaXMgbGlzdGVuZXJcbiAgICAgICAgICAgIHRoaXMuc2V0U3BlY2lhbE1lc3NhZ2VIYW5kbGVyKGRhdGEuX19zZWxlY3RvciwgbnVsbCwgc3BlY2lhbE1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLl9fYXJndW1lbnQgJiYgZGF0YS5fX2FyZ3VtZW50LldJUlNvY2tldERhdGFLZXkpIHtcbiAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbWVzc2FnZXMgY29taW5nIGFuZCBnb2luZyB1c2luZ1xuICAgICAgICAvLyBhIHNpbXBsZSBzZXF1ZW50aWFsIGlkXG4gICAgICAgIHRoaXMuY3VyTXNnSWQrKztcblxuICAgICAgICBjb25zdCBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgY29uc3QgbXNnID0gYFJlbW90ZSBkZWJ1Z2dlciBlcnJvciB3aXRoIGNvZGUgJyR7ZXJyLmNvZGV9JzogJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IobXNnKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXREYXRhTWVzc2FnZUhhbmRsZXIodGhpcy5jdXJNc2dJZC50b1N0cmluZygpLCBlcnJvckhhbmRsZXIsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1zZyA9IF8udHJ1bmNhdGUoXy5pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKSwge2xlbmd0aDogNTB9KTtcbiAgICAgICAgICBsb2cuZGVidWcoYFJlY2VpdmVkIGRhdGEgcmVzcG9uc2UgZnJvbSBzb2NrZXQgc2VuZDogJyR7bXNnfSdgKTtcbiAgICAgICAgICBsb2cuZGVidWcoYE9yaWdpbmFsIGNvbW1hbmQ6ICR7Y29tbWFuZH1gKTtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGEuX19hcmd1bWVudC5XSVJTb2NrZXREYXRhS2V5LmlkID0gdGhpcy5jdXJNc2dJZDtcbiAgICAgICAgZGF0YS5fX2FyZ3VtZW50LldJUlNvY2tldERhdGFLZXkgPVxuICAgICAgICAgICAgQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoZGF0YS5fX2FyZ3VtZW50LldJUlNvY2tldERhdGFLZXkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIHdhbnQgdG8gaW1tZWRpYXRlbHkgcmVzb2x2ZSB0aGlzIHNvY2tldC53cml0ZVxuICAgICAgICAvLyBhbnkgbG9uZyB0ZXJtIGNhbGxiYWNrcyB3aWxsIGRvIHRoZWlyIGJ1c2luZXNzIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgICAgIHNvY2tldENiID0gcmVzb2x2ZTtcbiAgICAgIH1cblxuICAgICAgbG9nLmRlYnVnKGBTZW5kaW5nICcke2RhdGEuX19zZWxlY3Rvcn0nIG1lc3NhZ2UgdG8gcmVtb3RlIGRlYnVnZ2VyYCk7XG5cbiAgICAgIC8vIHJlbW90ZSBkZWJ1Z2dlciBleHBlY3RzIGEgYmluYXJ5IHBsaXN0IGFzIGRhdGFcbiAgICAgIGxldCBwbGlzdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBsaXN0ID0gYnBsaXN0Q3JlYXRlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsZXQgbXNnID0gYENvdWxkIG5vdCBjcmVhdGUgYmluYXJ5IHBsaXN0IGZyb20gZGF0YTogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgbG9nLmVycm9yKG1zZyk7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKG1zZykpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgLy8gY29yayBhbmQgdW5jb3JrIGluIG9yZGVyIHRvIG5vdCBidWZmZXIgdGhlIHdyaXRlXG4gICAgICAgIC8vIG9uIHNvbWUgc3lzdGVtcyB0aGlzIGlzIG5lY2Vzc2FyeSBvciB0aGUgc2VydmVyXG4gICAgICAgIC8vIGdldHMgY29uZnVzZWQuXG4gICAgICAgIHRoaXMuc29ja2V0LmNvcmsoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoYnVmZmVycGFjay5wYWNrKCdMJywgW3BsaXN0Lmxlbmd0aF0pKTtcbiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUocGxpc3QsIHNvY2tldENiKTtcbiAgICAgICAgdGhpcy5zb2NrZXQudW5jb3JrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbXNnID0gJ0F0dGVtcHRlZCB0byB3cml0ZSBkYXRhIHRvIHNvY2tldCBhZnRlciBpdCB3YXMgY2xvc2VkISc7XG4gICAgICAgIGxvZy5lcnJvcihtc2cpO1xuICAgICAgICByZWplY3QobmV3IEVycm9yKG1zZykpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgLy8gcmVtb3ZlIHRoaXMgbGlzdGVuZXIsIHNvIHdlIGRvbid0IGV4aGF1c3QgdGhlIHN5c3RlbVxuICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25Tb2NrZXRFcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICByZWNlaXZlIChkYXRhKSB7XG4gICAgLy8gQXBwZW5kIHRoaXMgbmV3IGRhdGEgdG8gdGhlIGV4aXN0aW5nIEJ1ZmZlclxuICAgIHRoaXMucmVjZWl2ZWQgPSBCdWZmZXIuY29uY2F0KFt0aGlzLnJlY2VpdmVkLCBkYXRhXSk7XG4gICAgbGV0IGRhdGFMZWZ0T3ZlciA9IHRydWU7XG5cbiAgICAvLyBQYXJzZSBtdWx0aXBsZSBtZXNzYWdlcyBpbiB0aGUgc2FtZSBwYWNrZXRcbiAgICB3aGlsZSAoZGF0YUxlZnRPdmVyKSB7XG4gICAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB3aGVyZSB3ZSB3ZXJlXG4gICAgICBsZXQgb2xkUmVhZFBvcyA9IHRoaXMucmVhZFBvcztcblxuICAgICAgLy8gUmVhZCB0aGUgcHJlZml4IChwbGlzdCBsZW5ndGgpIHRvIHNlZSBob3cgZmFyIHRvIHJlYWQgbmV4dFxuICAgICAgLy8gSXQncyBhbHdheXMgNCBieXRlcyBsb25nXG4gICAgICBsZXQgcHJlZml4ID0gdGhpcy5yZWNlaXZlZC5zbGljZSh0aGlzLnJlYWRQb3MsIHRoaXMucmVhZFBvcyArIDQpO1xuXG4gICAgICBsZXQgbXNnTGVuZ3RoO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnTGVuZ3RoID0gYnVmZmVycGFjay51bnBhY2soJ0wnLCBwcmVmaXgpWzBdO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoYEJ1ZmZlciBjb3VsZCBub3QgdW5wYWNrOiAke2V9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSnVtcCBmb3J3YXJkIDQgYnl0ZXNcbiAgICAgIHRoaXMucmVhZFBvcyArPSA0O1xuXG4gICAgICAvLyBJcyB0aGVyZSBlbm91Z2ggZGF0YSBoZXJlP1xuICAgICAgLy8gSWYgbm90LCBqdW1wIGJhY2sgdG8gb3VyIG9yaWdpbmFsIHBvc2l0aW9uIGFuZCBndGZvXG4gICAgICBpZiAodGhpcy5yZWNlaXZlZC5sZW5ndGggPCBtc2dMZW5ndGggKyB0aGlzLnJlYWRQb3MpIHtcbiAgICAgICAgdGhpcy5yZWFkUG9zID0gb2xkUmVhZFBvcztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dHJhY3QgdGhlIG1haW4gYm9keSBvZiB0aGUgbWVzc2FnZSAod2hlcmUgdGhlIHBsaXN0IHNob3VsZCBiZSlcbiAgICAgIGxldCBib2R5ID0gdGhpcy5yZWNlaXZlZC5zbGljZSh0aGlzLnJlYWRQb3MsIG1zZ0xlbmd0aCArIHRoaXMucmVhZFBvcyk7XG5cbiAgICAgIC8vIEV4dHJhY3QgdGhlIHBsaXN0XG4gICAgICBsZXQgcGxpc3Q7XG4gICAgICB0cnkge1xuICAgICAgICBwbGlzdCA9IGJwbGlzdFBhcnNlLnBhcnNlQnVmZmVyKGJvZHkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoYEVycm9yIHBhcnNpbmcgYmluYXJ5IHBsaXN0OiAke2V9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYnBsaXN0UGFyc2UucGFyc2VCdWZmZXIgcmV0dXJucyBhbiBhcnJheVxuICAgICAgaWYgKHBsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBwbGlzdCA9IHBsaXN0WzBdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBrZXkgb2YgWydXSVJNZXNzYWdlRGF0YUtleScsICdXSVJEZXN0aW5hdGlvbktleScsICdXSVJTb2NrZXREYXRhS2V5J10pIHtcbiAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHBsaXN0W2tleV0pKSB7XG4gICAgICAgICAgcGxpc3Rba2V5XSA9IHBsaXN0W2tleV0udG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEp1bXAgZm9yd2FyZCB0aGUgbGVuZ3RoIG9mIHRoZSBwbGlzdFxuICAgICAgdGhpcy5yZWFkUG9zICs9IG1zZ0xlbmd0aDtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGhvdyBtdWNoIGJ1ZmZlciBpcyBsZWZ0XG4gICAgICBsZXQgbGVmdE92ZXIgPSB0aGlzLnJlY2VpdmVkLmxlbmd0aCAtIHRoaXMucmVhZFBvcztcblxuICAgICAgLy8gSXMgdGhlcmUgc29tZSBsZWZ0IG92ZXI/XG4gICAgICBpZiAobGVmdE92ZXIgIT09IDApIHtcbiAgICAgICAgLy8gQ29weSB3aGF0J3MgbGVmdCBvdmVyIGludG8gYSBuZXcgYnVmZmVyLCBhbmQgc2F2ZSBpdCBmb3IgbmV4dCB0aW1lXG4gICAgICAgIGxldCBjaHVuayA9IEJ1ZmZlci5hbGxvYyhsZWZ0T3Zlcik7XG4gICAgICAgIHRoaXMucmVjZWl2ZWQuY29weShjaHVuaywgMCwgdGhpcy5yZWFkUG9zKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlZCA9IGNodW5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBlbXB0eSB0aGUgYnVmZmVyIGFuZCBnZXQgb3V0IG9mIHRoZSBsb29wXG4gICAgICAgIHRoaXMucmVjZWl2ZWQgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICAgIGRhdGFMZWZ0T3ZlciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNldCB0aGUgcmVhZCBwb3NpdGlvblxuICAgICAgdGhpcy5yZWFkUG9zID0gMDtcblxuICAgICAgLy8gTm93IGRvIHNvbWV0aGluZyB3aXRoIHRoZSBwbGlzdFxuICAgICAgaWYgKHBsaXN0KSB7XG4gICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuaGFuZGxlTWVzc2FnZShwbGlzdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0VGltZWxpbmVFdmVudEhhbmRsZXIgKHRpbWVsaW5lRXZlbnRIYW5kbGVyKSB7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50SGFuZGxlciA9IHRpbWVsaW5lRXZlbnRIYW5kbGVyO1xuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuc2V0VGltZWxpbmVFdmVudEhhbmRsZXIodGltZWxpbmVFdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgc2V0Q29uc29sZUxvZ0V2ZW50SGFuZGxlciAoY29uc29sZUV2ZW50SGFuZGxlcikge1xuICAgIHRoaXMuY29uc29sZUV2ZW50SGFuZGxlciA9IGNvbnNvbGVFdmVudEhhbmRsZXI7XG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlci5zZXRDb25zb2xlTG9nRXZlbnRIYW5kbGVyKGNvbnNvbGVFdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgc2V0TmV0d29ya0xvZ0V2ZW50SGFuZGxlciAobmV0d29ya0V2ZW50SGFuZGxlcikge1xuICAgIHRoaXMubmV0d29ya0V2ZW50SGFuZGxlciA9IG5ldHdvcmtFdmVudEhhbmRsZXI7XG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlci5zZXROZXR3b3JrRXZlbnRIYW5kbGVyKG5ldHdvcmtFdmVudEhhbmRsZXIpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
