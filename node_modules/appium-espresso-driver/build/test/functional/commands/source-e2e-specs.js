'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _xmldom = require('xmldom');

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

var _helpersSession = require('../helpers/session');

var _desired = require('../desired');

var _ = require('../../..');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('source commands', function () {
  this.timeout(_helpersSession.MOCHA_TIMEOUT);

  var driver = undefined;
  var server = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpersSession.PORT, _helpersSession.HOST));

        case 2:
          server = context$2$0.sent;

          driver = _wd2['default'].promiseChainRemote(_helpersSession.HOST, _helpersSession.PORT);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.init(_desired.APIDEMO_CAPS));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(server.close());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[0, 5]]);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.quit());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[0, 5]]);
  });
  it('should get sourceXML, parse it, and find a node by xpath', function callee$1$0() {
    var sourceXML, doc, node;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.source());

        case 2:
          sourceXML = context$2$0.sent;

          sourceXML.should.be.a.string;
          doc = new _xmldom.DOMParser().parseFromString(sourceXML, 'test/xml');
          node = _xpath2['default'].select('//*[content-desc=Animation]', doc);

          node.should.exist;

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zb3VyY2UtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7a0JBQzlCLElBQUk7Ozs7c0JBQ08sUUFBUTs7cUJBQ2hCLE9BQU87Ozs7OEJBQ2lCLG9CQUFvQjs7dUJBQ2pDLFlBQVk7O2dCQUNiLFVBQVU7O0FBR3RDLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQVk7QUFDdEMsTUFBSSxDQUFDLE9BQU8sK0JBQWUsQ0FBQzs7QUFFNUIsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLE1BQUksTUFBTSxZQUFBLENBQUM7QUFDWCxRQUFNLENBQUM7Ozs7OzJDQUNVLDhEQUF1Qjs7O0FBQXRDLGdCQUFNOztBQUNOLGdCQUFNLEdBQUcsZ0JBQUcsa0JBQWtCLDRDQUFZLENBQUM7OzJDQUNyQyxNQUFNLENBQUMsSUFBSSx1QkFBYzs7Ozs7OztHQUNoQyxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzsyQ0FFSSxNQUFNLENBQUMsS0FBSyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7R0FFdkIsQ0FBQyxDQUFDO0FBQ0gsV0FBUyxDQUFDOzs7Ozs7MkNBRUEsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBRXRCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywwREFBMEQsRUFBRTtRQUN2RCxTQUFTLEVBRVQsR0FBRyxFQUNILElBQUk7Ozs7OzJDQUhjLE1BQU0sQ0FBQyxNQUFNLEVBQUU7OztBQUFqQyxtQkFBUzs7QUFDZixtQkFBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN2QixhQUFHLEdBQUcsdUJBQWUsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztBQUM1RCxjQUFJLEdBQUcsbUJBQU0sTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQzs7QUFDN0QsY0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7Ozs7R0FDbkIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zb3VyY2UtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgd2QgZnJvbSAnd2QnO1xuaW1wb3J0IHsgRE9NUGFyc2VyIH0gZnJvbSAneG1sZG9tJztcbmltcG9ydCB4cGF0aCBmcm9tICd4cGF0aCc7XG5pbXBvcnQgeyBIT1NULCBQT1JULCBNT0NIQV9USU1FT1VUIH0gZnJvbSAnLi4vaGVscGVycy9zZXNzaW9uJztcbmltcG9ydCB7IEFQSURFTU9fQ0FQUyB9IGZyb20gJy4uL2Rlc2lyZWQnO1xuaW1wb3J0IHsgc3RhcnRTZXJ2ZXIgfSBmcm9tICcuLi8uLi8uLic7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ3NvdXJjZSBjb21tYW5kcycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBkcml2ZXI7XG4gIGxldCBzZXJ2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgc2VydmVyID0gYXdhaXQgc3RhcnRTZXJ2ZXIoUE9SVCwgSE9TVCk7XG4gICAgZHJpdmVyID0gd2QucHJvbWlzZUNoYWluUmVtb3RlKEhPU1QsIFBPUlQpO1xuICAgIGF3YWl0IGRyaXZlci5pbml0KEFQSURFTU9fQ0FQUyk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNlcnZlci5jbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfSk7XG4gIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9KTtcbiAgaXQoJ3Nob3VsZCBnZXQgc291cmNlWE1MLCBwYXJzZSBpdCwgYW5kIGZpbmQgYSBub2RlIGJ5IHhwYXRoJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHNvdXJjZVhNTCA9IGF3YWl0IGRyaXZlci5zb3VyY2UoKTtcbiAgICBzb3VyY2VYTUwuc2hvdWxkLmJlLmEuc3RyaW5nO1xuICAgIGNvbnN0IGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc291cmNlWE1MLCAndGVzdC94bWwnKTtcbiAgICBjb25zdCBub2RlID0geHBhdGguc2VsZWN0KCcvLypbY29udGVudC1kZXNjPUFuaW1hdGlvbl0nLCBkb2MpO1xuICAgIG5vZGUuc2hvdWxkLmV4aXN0O1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
