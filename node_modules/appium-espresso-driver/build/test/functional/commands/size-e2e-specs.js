'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _helpersSession = require('../helpers/session');

var _desired = require('../desired');

var _ = require('../../..');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Size', function () {
  this.timeout(_helpersSession.MOCHA_TIMEOUT);

  var driver = undefined;
  var server = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpersSession.PORT, _helpersSession.HOST));

        case 2:
          server = context$2$0.sent;

          driver = _wd2['default'].promiseChainRemote(_helpersSession.HOST, _helpersSession.PORT);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(server.close());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[0, 5]]);
  });
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.init(_desired.APIDEMO_CAPS));

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[0, 5]]);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.quit());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[0, 5]]);
  });

  it('should find size of window', function callee$1$0() {
    var _ref, width, height;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.getWindowSize());

        case 2:
          _ref = context$2$0.sent;
          width = _ref.width;
          height = _ref.height;

          width.should.be.above(0);
          height.should.be.above(0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zaXplLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2tCQUM5QixJQUFJOzs7OzhCQUN1QixvQkFBb0I7O3VCQUNqQyxZQUFZOztnQkFDYixVQUFVOztBQUd0QyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxNQUFNLEVBQUUsWUFBWTtBQUMzQixNQUFJLENBQUMsT0FBTywrQkFBZSxDQUFDOztBQUU1QixNQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFFBQU0sQ0FBQzs7Ozs7MkNBQ1UsOERBQXVCOzs7QUFBdEMsZ0JBQU07O0FBQ04sZ0JBQU0sR0FBRyxnQkFBRyxrQkFBa0IsNENBQVksQ0FBQzs7Ozs7OztHQUM1QyxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzsyQ0FFSSxNQUFNLENBQUMsS0FBSyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7R0FFdkIsQ0FBQyxDQUFDO0FBQ0gsWUFBVSxDQUFDOzs7Ozs7MkNBRUQsTUFBTSxDQUFDLElBQUksdUJBQWM7Ozs7Ozs7Ozs7Ozs7OztHQUVsQyxDQUFDLENBQUM7QUFDSCxXQUFTLENBQUM7Ozs7OzsyQ0FFQSxNQUFNLENBQUMsSUFBSSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7R0FFdEIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyw0QkFBNEIsRUFBRTtjQUN4QixLQUFLLEVBQUUsTUFBTTs7Ozs7OzJDQUFVLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7QUFBN0MsZUFBSyxRQUFMLEtBQUs7QUFBRSxnQkFBTSxRQUFOLE1BQU07O0FBQ3BCLGVBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Z1bmN0aW9uYWwvY29tbWFuZHMvc2l6ZS1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB3ZCBmcm9tICd3ZCc7XG5pbXBvcnQgeyBIT1NULCBQT1JULCBNT0NIQV9USU1FT1VUIH0gZnJvbSAnLi4vaGVscGVycy9zZXNzaW9uJztcbmltcG9ydCB7IEFQSURFTU9fQ0FQUyB9IGZyb20gJy4uL2Rlc2lyZWQnO1xuaW1wb3J0IHsgc3RhcnRTZXJ2ZXIgfSBmcm9tICcuLi8uLi8uLic7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1NpemUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dChNT0NIQV9USU1FT1VUKTtcblxuICBsZXQgZHJpdmVyO1xuICBsZXQgc2VydmVyO1xuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHNlcnZlciA9IGF3YWl0IHN0YXJ0U2VydmVyKFBPUlQsIEhPU1QpO1xuICAgIGRyaXZlciA9IHdkLnByb21pc2VDaGFpblJlbW90ZShIT1NULCBQT1JUKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9KTtcbiAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRyaXZlci5pbml0KEFQSURFTU9fQ0FQUyk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9KTtcbiAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZHJpdmVyLnF1aXQoKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZmluZCBzaXplIG9mIHdpbmRvdycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBhd2FpdCBkcml2ZXIuZ2V0V2luZG93U2l6ZSgpO1xuICAgIHdpZHRoLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICBoZWlnaHQuc2hvdWxkLmJlLmFib3ZlKDApO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
