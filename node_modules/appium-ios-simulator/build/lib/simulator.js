'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode62 = _interopRequireDefault(_simulatorXcode6);

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _simulatorXcode73 = require('./simulator-xcode-7.3');

var _simulatorXcode732 = _interopRequireDefault(_simulatorXcode73);

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _simulatorXcode9 = require('./simulator-xcode-9');

var _simulatorXcode92 = _interopRequireDefault(_simulatorXcode9);

var _simulatorXcode93 = require('./simulator-xcode-9.3');

var _simulatorXcode932 = _interopRequireDefault(_simulatorXcode93);

var _utils = require('./utils');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error('Tried to use an iOS simulator with xcode ' + ('version ' + xcodeVersion.versionString + ' but only Xcode version ') + '6.0.0 and up are supported');
  }
}

/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {object} Simulator object associated with the udid passed in.
 */
function getSimulator(udid) {
  var xcodeVersion, SimClass;
  return _regeneratorRuntime.async(function getSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _utils.simExists)(udid));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('No sim found with udid ' + udid);

      case 7:

        _logger2['default'].info('Constructing iOS simulator for Xcode version ' + xcodeVersion.versionString + ' ' + ('with udid \'' + udid + '\''));
        SimClass = undefined;
        context$1$0.t0 = xcodeVersion.major;
        context$1$0.next = context$1$0.t0 === 6 ? 12 : context$1$0.t0 === 7 ? 14 : context$1$0.t0 === 8 ? 16 : context$1$0.t0 === 9 ? 18 : context$1$0.t0 === 10 ? 20 : 22;
        break;

      case 12:
        SimClass = _simulatorXcode62['default'];
        return context$1$0.abrupt('break', 24);

      case 14:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode72['default'];
        } else {
          SimClass = _simulatorXcode732['default'];
        }
        return context$1$0.abrupt('break', 24);

      case 16:
        SimClass = _simulatorXcode82['default'];
        return context$1$0.abrupt('break', 24);

      case 18:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode92['default'];
        } else {
          SimClass = _simulatorXcode932['default'];
        }
        return context$1$0.abrupt('break', 24);

      case 20:
        SimClass = _simulatorXcode932['default'];
        return context$1$0.abrupt('break', 24);

      case 22:
        handleUnsupportedXcode(xcodeVersion);
        SimClass = _simulatorXcode932['default'];

      case 24:
        return context$1$0.abrupt('return', new SimClass(udid, xcodeVersion));

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Takes a set of options and finds the correct device string in order for Instruments to
 * identify the correct simulator.
 *
 * @param {object} opts - The options available are:
 *   - `deviceName` - a name for the device. If the given device name starts with `=`, the name, less the equals sign, is returned.
 *   - `platformVersion` - the version of iOS to use. Defaults to the current Xcode's maximum SDK version.
 *   - `forceIphone` - force the configuration of the device string to iPhone. Defaults to `false`.
 *   - `forceIpad` - force the configuration of the device string to iPad. Defaults to `false`.
 *   If both `forceIphone` and `forceIpad` are true, the device will be forced to iPhone.
 *
 * @return {string} The found device string, for example:
 *   'iPhone 5 (8.4)' with Xcode 7+
 *   'iPhone 5 (8.4 Simulator)' with Xcode 6+
 */
function getDeviceString(opts) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getDeviceString$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Retrieving device name string for Xcode version ' + xcodeVersion.versionString);

        if (!(xcodeVersion.major >= 8)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_simulatorXcode72['default'].getDeviceString(opts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
        if (!(xcodeVersion.major === 7)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_simulatorXcode72['default'].getDeviceString(opts));

      case 14:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_simulatorXcode62['default'].getDeviceString(opts));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsrQkFBNEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OzsrQkFDeEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OztxQkFDMUIsU0FBUzs7MkJBQ2pCLGNBQWM7Ozs7c0JBQ2hCLFVBQVU7Ozs7QUFHMUIsU0FBUyxzQkFBc0IsQ0FBRSxZQUFZLEVBQUU7QUFDN0MsTUFBSSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtBQUMxQixVQUFNLElBQUksS0FBSyxDQUFDLDREQUNXLFlBQVksQ0FBQyxhQUFhLDhCQUEwQiwrQkFDbkMsQ0FBQyxDQUFDO0dBQy9DO0NBQ0Y7Ozs7Ozs7Ozs7O0FBV0QsU0FBZSxZQUFZLENBQUUsSUFBSTtNQUMzQixZQUFZLEVBUVosUUFBUTs7Ozs7eUNBUmEseUJBQU0sVUFBVSxDQUFDLElBQUksQ0FBQzs7O0FBQTNDLG9CQUFZOzt5Q0FFTCxzQkFBVSxJQUFJLENBQUM7Ozs7Ozs7O2NBQ2xCLElBQUksS0FBSyw2QkFBMkIsSUFBSSxDQUFHOzs7O0FBR25ELDRCQUFJLElBQUksQ0FBQyxrREFBZ0QsWUFBWSxDQUFDLGFBQWEsMkJBQzVELElBQUksUUFBRyxDQUFDLENBQUM7QUFDNUIsZ0JBQVE7eUJBQ0osWUFBWSxDQUFDLEtBQUs7OENBQ25CLENBQUMsMkJBR0QsQ0FBQywyQkFPRCxDQUFDLDJCQUdELENBQUMsMkJBT0QsRUFBRTs7OztBQW5CTCxnQkFBUSwrQkFBa0IsQ0FBQzs7OztBQUczQixZQUFJLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLGtCQUFRLCtCQUFrQixDQUFDO1NBQzVCLE1BQU07QUFDTCxrQkFBUSxnQ0FBbUIsQ0FBQztTQUM3Qjs7OztBQUdELGdCQUFRLCtCQUFrQixDQUFDOzs7O0FBRzNCLFlBQUksWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUU7QUFDMUIsa0JBQVEsK0JBQWtCLENBQUM7U0FDNUIsTUFBTTtBQUNMLGtCQUFRLGdDQUFtQixDQUFDO1NBQzdCOzs7O0FBR0QsZ0JBQVEsZ0NBQW1CLENBQUM7Ozs7QUFHNUIsOEJBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsZ0JBQVEsZ0NBQW1CLENBQUM7Ozs0Q0FFekIsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQzs7Ozs7OztDQUN4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkQsU0FBZSxlQUFlLENBQUUsSUFBSTtNQUM5QixZQUFZOzs7Ozt5Q0FBUyx5QkFBTSxVQUFVLENBQUMsSUFBSSxDQUFDOzs7QUFBM0Msb0JBQVk7O0FBRWhCLDhCQUFzQixDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUVyQyw0QkFBSSxJQUFJLHNEQUFvRCxZQUFZLENBQUMsYUFBYSxDQUFHLENBQUM7O2NBQ3RGLFlBQVksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFBOzs7Ozs7eUNBQ1osNkJBQWdCLGVBQWUsQ0FBQyxJQUFJLENBQUM7Ozs7OztjQUN6QyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQTs7Ozs7O3lDQUNwQiw2QkFBZ0IsZUFBZSxDQUFDLElBQUksQ0FBQzs7Ozs7O2NBQ3pDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBOzs7Ozs7eUNBQ3BCLDZCQUFnQixlQUFlLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7O0NBRXJEOztRQUVRLFlBQVksR0FBWixZQUFZO1FBQUUsZUFBZSxHQUFmLGVBQWUiLCJmaWxlIjoibGliL3NpbXVsYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW11bGF0b3JYY29kZTYgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNic7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU3IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTcnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlNzMgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNy4zJztcbmltcG9ydCBTaW11bGF0b3JYY29kZTggZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOCc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU5IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTknO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlOTMgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOS4zJztcbmltcG9ydCB7IHNpbUV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHhjb2RlIGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5mdW5jdGlvbiBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlICh4Y29kZVZlcnNpb24pIHtcbiAgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA8IDYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIHVzZSBhbiBpT1Mgc2ltdWxhdG9yIHdpdGggeGNvZGUgYCArXG4gICAgICAgICAgICAgICAgICAgIGB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9IGJ1dCBvbmx5IFhjb2RlIHZlcnNpb24gYCArXG4gICAgICAgICAgICAgICAgICAgIGA2LjAuMCBhbmQgdXAgYXJlIHN1cHBvcnRlZGApO1xuICB9XG59XG5cbi8qKlxuICogRmluZHMgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgU2ltdWxhdG9yIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgLSBUaGUgSUQgb2YgYW4gZXhpc3RpbmcgU2ltdWxhdG9yLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBTaW11bGF0b3Igd2l0aCBnaXZlbiB1ZGlkIGRvZXMgbm90IGV4aXN0IGluIGRldmljZXMgbGlzdC5cbiAqICAgSWYgeW91IHdhbnQgdG8gY3JlYXRlIGEgbmV3IHNpbXVsYXRvciwgeW91IGNhbiB1c2UgdGhlIGBjcmVhdGVEZXZpY2UoKWAgbWV0aG9kIG9mXG4gKiAgIFtub2RlLXNpbWN0bF0oZ2l0aHViLmNvbS9hcHBpdW0vbm9kZS1zaW1jdGwpLlxuICogQHJldHVybiB7b2JqZWN0fSBTaW11bGF0b3Igb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgdWRpZCBwYXNzZWQgaW4uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFNpbXVsYXRvciAodWRpZCkge1xuICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcblxuICBpZiAoIWF3YWl0IHNpbUV4aXN0cyh1ZGlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2ltIGZvdW5kIHdpdGggdWRpZCAke3VkaWR9YCk7XG4gIH1cblxuICBsb2cuaW5mbyhgQ29uc3RydWN0aW5nIGlPUyBzaW11bGF0b3IgZm9yIFhjb2RlIHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gYCArXG4gICAgICAgICAgIGB3aXRoIHVkaWQgJyR7dWRpZH0nYCk7XG4gIGxldCBTaW1DbGFzcztcbiAgc3dpdGNoICh4Y29kZVZlcnNpb24ubWFqb3IpIHtcbiAgICBjYXNlIDY6XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlNjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNzpcbiAgICAgIGlmICh4Y29kZVZlcnNpb24ubWlub3IgPCAzKSB7XG4gICAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTczO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDk6XG4gICAgICBpZiAoeGNvZGVWZXJzaW9uLm1pbm9yIDwgMykge1xuICAgICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlOTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU5MztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlOTM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaGFuZGxlVW5zdXBwb3J0ZWRYY29kZSh4Y29kZVZlcnNpb24pO1xuICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTkzO1xuICB9XG4gIHJldHVybiBuZXcgU2ltQ2xhc3ModWRpZCwgeGNvZGVWZXJzaW9uKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHNldCBvZiBvcHRpb25zIGFuZCBmaW5kcyB0aGUgY29ycmVjdCBkZXZpY2Ugc3RyaW5nIGluIG9yZGVyIGZvciBJbnN0cnVtZW50cyB0b1xuICogaWRlbnRpZnkgdGhlIGNvcnJlY3Qgc2ltdWxhdG9yLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gVGhlIG9wdGlvbnMgYXZhaWxhYmxlIGFyZTpcbiAqICAgLSBgZGV2aWNlTmFtZWAgLSBhIG5hbWUgZm9yIHRoZSBkZXZpY2UuIElmIHRoZSBnaXZlbiBkZXZpY2UgbmFtZSBzdGFydHMgd2l0aCBgPWAsIHRoZSBuYW1lLCBsZXNzIHRoZSBlcXVhbHMgc2lnbiwgaXMgcmV0dXJuZWQuXG4gKiAgIC0gYHBsYXRmb3JtVmVyc2lvbmAgLSB0aGUgdmVyc2lvbiBvZiBpT1MgdG8gdXNlLiBEZWZhdWx0cyB0byB0aGUgY3VycmVudCBYY29kZSdzIG1heGltdW0gU0RLIHZlcnNpb24uXG4gKiAgIC0gYGZvcmNlSXBob25lYCAtIGZvcmNlIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBkZXZpY2Ugc3RyaW5nIHRvIGlQaG9uZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqICAgLSBgZm9yY2VJcGFkYCAtIGZvcmNlIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBkZXZpY2Ugc3RyaW5nIHRvIGlQYWQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKiAgIElmIGJvdGggYGZvcmNlSXBob25lYCBhbmQgYGZvcmNlSXBhZGAgYXJlIHRydWUsIHRoZSBkZXZpY2Ugd2lsbCBiZSBmb3JjZWQgdG8gaVBob25lLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvdW5kIGRldmljZSBzdHJpbmcsIGZvciBleGFtcGxlOlxuICogICAnaVBob25lIDUgKDguNCknIHdpdGggWGNvZGUgNytcbiAqICAgJ2lQaG9uZSA1ICg4LjQgU2ltdWxhdG9yKScgd2l0aCBYY29kZSA2K1xuICovXG5hc3luYyBmdW5jdGlvbiBnZXREZXZpY2VTdHJpbmcgKG9wdHMpIHtcbiAgbGV0IHhjb2RlVmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldFZlcnNpb24odHJ1ZSk7XG5cbiAgaGFuZGxlVW5zdXBwb3J0ZWRYY29kZSh4Y29kZVZlcnNpb24pO1xuXG4gIGxvZy5pbmZvKGBSZXRyaWV2aW5nIGRldmljZSBuYW1lIHN0cmluZyBmb3IgWGNvZGUgdmVyc2lvbiAke3hjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfWApO1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID49IDgpIHtcbiAgICByZXR1cm4gYXdhaXQgU2ltdWxhdG9yWGNvZGU3LmdldERldmljZVN0cmluZyhvcHRzKTtcbiAgfSBlbHNlIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPT09IDcpIHtcbiAgICByZXR1cm4gYXdhaXQgU2ltdWxhdG9yWGNvZGU3LmdldERldmljZVN0cmluZyhvcHRzKTtcbiAgfSBlbHNlIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPT09IDYpIHtcbiAgICByZXR1cm4gYXdhaXQgU2ltdWxhdG9yWGNvZGU2LmdldERldmljZVN0cmluZyhvcHRzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRTaW11bGF0b3IsIGdldERldmljZVN0cmluZyB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
