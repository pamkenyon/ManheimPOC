'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _utils = require('./utils');

var Calendar = (function () {
  function Calendar(xcodeVersion, sharedResourcesDir) {
    _classCallCheck(this, Calendar);

    this.xcodeVersion = xcodeVersion;
    this.sharedResourcesDir = sharedResourcesDir;
  }

  _createClass(Calendar, [{
    key: 'getDB',
    value: function getDB() {
      var tccPath;
      return _regeneratorRuntime.async(function getDB$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.db) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.db);

          case 2:
            tccPath = _path2['default'].resolve(this.sharedResourcesDir, 'Library', 'TCC');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tccPath));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(tccPath));

          case 8:

            this.db = _path2['default'].resolve(tccPath, 'TCC.db');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(this.db, 'CREATE TABLE IF NOT EXISTS access (\n      service TEXT NOT NULL DEFAULT \'\',\n      client TEXT NOT NULL DEFAULT \'\',\n      client_type INTEGER,\n      allowed INTEGER,\n      prompt_count INTEGER,\n      csreq BLOB NOT NULL DEFAULT \'\',\n      policy_ID INTEGER,\n      PRIMARY KEY(service, client, client_type)\n    );'.replace(/\n/g, '')));

          case 11:
            return context$2$0.abrupt('return', this.db);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getCalendarRowCount',
    value: function getCalendarRowCount(bundleID) {
      var db, count;
      return _regeneratorRuntime.async(function getCalendarRowCount$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'SELECT count(*) FROM access WHERE client=\'?\' AND service=\'kTCCServiceCalendar\';', bundleID));

          case 5:
            count = context$2$0.sent;
            return context$2$0.abrupt('return', parseInt(count.stdout.split('=')[1], 10));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'hasCalendarAccess',
    value: function hasCalendarAccess(bundleID) {
      var count;
      return _regeneratorRuntime.async(function hasCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = _regeneratorRuntime;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getDB());

          case 3:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = bundleID;
            context$2$0.t3 = (0, _utils.execSQLiteQuery)(context$2$0.t1, 'SELECT count(*) FROM access WHERE client=\'?\' AND allowed=1 AND service=\'kTCCServiceCalendar\';', context$2$0.t2);
            context$2$0.next = 8;
            return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);

          case 8:
            count = context$2$0.sent;
            return context$2$0.abrupt('return', parseInt(count.stdout.split('=')[1], 10) > 0);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'enableCalendarAccess',
    value: function enableCalendarAccess(bundleID) {
      var db, query;
      return _regeneratorRuntime.async(function enableCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            query = undefined;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.getCalendarRowCount(bundleID));

          case 6:
            context$2$0.t0 = context$2$0.sent;

            if (!(context$2$0.t0 > 0)) {
              context$2$0.next = 11;
              break;
            }

            query = 'UPDATE \'access\' SET\n        service=\'kTCCServiceCalendar\',\n        client_type=0,\n        allowed=1,\n        prompt_count=1,\n        csreq=0\n      WHERE client=\'?\' AND service=\'kTCCServiceCalendar\''.replace(/\n/g, ' ');
            context$2$0.next = 12;
            break;

          case 11:
            query = this.xcodeVersion.major < 10 ? 'INSERT INTO \'access\' VALUES (\'kTCCServiceCalendar\', \'?\', 0, 1, 1, 0, 0);' : 'INSERT INTO \'access\' VALUES (\'kTCCServiceCalendar\', \'?\', 0, 1, 1, 0, 0, 0, 0, 0);';

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, query, bundleID));

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disableCalendarAccess',
    value: function disableCalendarAccess(bundleID) {
      var db;
      return _regeneratorRuntime.async(function disableCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getCalendarRowCount(bundleID));

          case 5:
            context$2$0.t0 = context$2$0.sent;

            if (!(context$2$0.t0 > 0)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'DELETE FROM \'access\' WHERE client=\'?\' AND service=\'kTCCServiceCalendar\''.replace(/\n/g, ' '), bundleID));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Calendar;
})();

exports['default'] = Calendar;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jYWxlbmRhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztvQkFBaUIsTUFBTTs7Ozs2QkFDSSxnQkFBZ0I7O3FCQUNYLFNBQVM7O0lBRXBCLFFBQVE7QUFFZixXQUZPLFFBQVEsQ0FFZCxZQUFZLEVBQUUsa0JBQWtCLEVBQUU7MEJBRjVCLFFBQVE7O0FBR3pCLFFBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ2pDLFFBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztHQUM5Qzs7ZUFMa0IsUUFBUTs7V0FPZjtVQUtOLE9BQU87Ozs7aUJBSlAsSUFBSSxDQUFDLEVBQUU7Ozs7O2dEQUNGLElBQUksQ0FBQyxFQUFFOzs7QUFHWixtQkFBTyxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQzs7NkNBQ3pELGtCQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7Ozs7Ozs7Ozs2Q0FDdEIsMkJBQU8sT0FBTyxDQUFDOzs7O0FBR3ZCLGdCQUFJLENBQUMsRUFBRSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7OzZDQUNwQyw0QkFBZ0IsSUFBSSxDQUFDLEVBQUUsRUFBRSx3VUFTM0IsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQzs7O2dEQUVoQixJQUFJLENBQUMsRUFBRTs7Ozs7OztLQUNmOzs7V0FFeUIsNkJBQUMsUUFBUTtVQUM3QixFQUFFLEVBQ0YsS0FBSzs7Ozs7NkNBRE0sSUFBSSxDQUFDLEtBQUssRUFBRTs7O0FBQXZCLGNBQUU7OzZDQUNZLDRCQUFnQixFQUFFLHlGQUFxRixRQUFRLENBQUM7OztBQUE5SCxpQkFBSztnREFDRixRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDOzs7Ozs7O0tBQ2hEOzs7V0FFdUIsMkJBQUMsUUFBUTtVQUMzQixLQUFLOzs7Ozs7NkNBQStCLElBQUksQ0FBQyxLQUFLLEVBQUU7Ozs7NkJBQW1HLFFBQVE7Ozs7OztBQUEzSixpQkFBSztnREFDRixRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQzs7Ozs7OztLQUNwRDs7O1dBRTBCLDhCQUFDLFFBQVE7VUFDOUIsRUFBRSxFQUVGLEtBQUs7Ozs7OzZDQUZNLElBQUksQ0FBQyxLQUFLLEVBQUU7OztBQUF2QixjQUFFO0FBRUYsaUJBQUs7OzZDQUNFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUM7Ozs7O21DQUFJLENBQUM7Ozs7O0FBQ2hELGlCQUFLLEdBQUcsc05BTTRDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Ozs7O0FBRXhFLGlCQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsRUFBRSwrS0FFaUQsQ0FBQzs7Ozs2Q0FFbEYsNEJBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDOzs7Ozs7O0tBQzNDOzs7V0FFMkIsK0JBQUMsUUFBUTtVQUMvQixFQUFFOzs7Ozs2Q0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFOzs7QUFBdkIsY0FBRTs7NkNBRUssSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQzs7Ozs7bUNBQUksQ0FBQzs7Ozs7OzZDQUMxQyw0QkFBZ0IsRUFBRSxFQUFFLGdGQUEwRSxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQzs7Ozs7OztLQUVySTs7O1NBckVrQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiJsaWIvY2FsZW5kYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBta2RpcnAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjU1FMaXRlUXVlcnkgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FsZW5kYXIge1xuXG4gIGNvbnN0cnVjdG9yICh4Y29kZVZlcnNpb24sIHNoYXJlZFJlc291cmNlc0Rpcikge1xuICAgIHRoaXMueGNvZGVWZXJzaW9uID0geGNvZGVWZXJzaW9uO1xuICAgIHRoaXMuc2hhcmVkUmVzb3VyY2VzRGlyID0gc2hhcmVkUmVzb3VyY2VzRGlyO1xuICB9XG5cbiAgYXN5bmMgZ2V0REIgKCkge1xuICAgIGlmICh0aGlzLmRiKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYjtcbiAgICB9XG5cbiAgICBsZXQgdGNjUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLnNoYXJlZFJlc291cmNlc0RpciwgJ0xpYnJhcnknLCAnVENDJyk7XG4gICAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKHRjY1BhdGgpKSkge1xuICAgICAgYXdhaXQgbWtkaXJwKHRjY1BhdGgpO1xuICAgIH1cblxuICAgIHRoaXMuZGIgPSBwYXRoLnJlc29sdmUodGNjUGF0aCwgJ1RDQy5kYicpO1xuICAgIGF3YWl0IGV4ZWNTUUxpdGVRdWVyeSh0aGlzLmRiLCBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYWNjZXNzIChcbiAgICAgIHNlcnZpY2UgVEVYVCBOT1QgTlVMTCBERUZBVUxUICcnLFxuICAgICAgY2xpZW50IFRFWFQgTk9UIE5VTEwgREVGQVVMVCAnJyxcbiAgICAgIGNsaWVudF90eXBlIElOVEVHRVIsXG4gICAgICBhbGxvd2VkIElOVEVHRVIsXG4gICAgICBwcm9tcHRfY291bnQgSU5URUdFUixcbiAgICAgIGNzcmVxIEJMT0IgTk9UIE5VTEwgREVGQVVMVCAnJyxcbiAgICAgIHBvbGljeV9JRCBJTlRFR0VSLFxuICAgICAgUFJJTUFSWSBLRVkoc2VydmljZSwgY2xpZW50LCBjbGllbnRfdHlwZSlcbiAgICApO2AucmVwbGFjZSgvXFxuL2csICcnKSk7XG5cbiAgICByZXR1cm4gdGhpcy5kYjtcbiAgfVxuXG4gIGFzeW5jIGdldENhbGVuZGFyUm93Q291bnQgKGJ1bmRsZUlEKSB7XG4gICAgbGV0IGRiID0gYXdhaXQgdGhpcy5nZXREQigpO1xuICAgIGxldCBjb3VudCA9IGF3YWl0IGV4ZWNTUUxpdGVRdWVyeShkYiwgYFNFTEVDVCBjb3VudCgqKSBGUk9NIGFjY2VzcyBXSEVSRSBjbGllbnQ9Jz8nIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJztgLCBidW5kbGVJRCk7XG4gICAgcmV0dXJuIHBhcnNlSW50KGNvdW50LnN0ZG91dC5zcGxpdCgnPScpWzFdLCAxMCk7XG4gIH1cblxuICBhc3luYyBoYXNDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBsZXQgY291bnQgPSBhd2FpdCBleGVjU1FMaXRlUXVlcnkoYXdhaXQgdGhpcy5nZXREQigpLCBgU0VMRUNUIGNvdW50KCopIEZST00gYWNjZXNzIFdIRVJFIGNsaWVudD0nPycgQU5EIGFsbG93ZWQ9MSBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcic7YCwgYnVuZGxlSUQpO1xuICAgIHJldHVybiBwYXJzZUludChjb3VudC5zdGRvdXQuc3BsaXQoJz0nKVsxXSwgMTApID4gMDtcbiAgfVxuXG4gIGFzeW5jIGVuYWJsZUNhbGVuZGFyQWNjZXNzIChidW5kbGVJRCkge1xuICAgIGxldCBkYiA9IGF3YWl0IHRoaXMuZ2V0REIoKTtcblxuICAgIGxldCBxdWVyeTtcbiAgICBpZiAoKGF3YWl0IHRoaXMuZ2V0Q2FsZW5kYXJSb3dDb3VudChidW5kbGVJRCkpID4gMCkge1xuICAgICAgcXVlcnkgPSBgVVBEQVRFICdhY2Nlc3MnIFNFVFxuICAgICAgICBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJyxcbiAgICAgICAgY2xpZW50X3R5cGU9MCxcbiAgICAgICAgYWxsb3dlZD0xLFxuICAgICAgICBwcm9tcHRfY291bnQ9MSxcbiAgICAgICAgY3NyZXE9MFxuICAgICAgV0hFUkUgY2xpZW50PSc/JyBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcidgLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWVyeSA9IHRoaXMueGNvZGVWZXJzaW9uLm1ham9yIDwgMTAgP1xuICAgICAgICBgSU5TRVJUIElOVE8gJ2FjY2VzcycgVkFMVUVTICgna1RDQ1NlcnZpY2VDYWxlbmRhcicsICc/JywgMCwgMSwgMSwgMCwgMCk7YCA6XG4gICAgICAgIGBJTlNFUlQgSU5UTyAnYWNjZXNzJyBWQUxVRVMgKCdrVENDU2VydmljZUNhbGVuZGFyJywgJz8nLCAwLCAxLCAxLCAwLCAwLCAwLCAwLCAwKTtgO1xuICAgIH1cbiAgICBhd2FpdCBleGVjU1FMaXRlUXVlcnkoZGIsIHF1ZXJ5LCBidW5kbGVJRCk7XG4gIH1cblxuICBhc3luYyBkaXNhYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgbGV0IGRiID0gYXdhaXQgdGhpcy5nZXREQigpO1xuXG4gICAgaWYgKChhd2FpdCB0aGlzLmdldENhbGVuZGFyUm93Q291bnQoYnVuZGxlSUQpKSA+IDApIHtcbiAgICAgIGF3YWl0IGV4ZWNTUUxpdGVRdWVyeShkYiwgYERFTEVURSBGUk9NICdhY2Nlc3MnIFdIRVJFIGNsaWVudD0nPycgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInYC5yZXBsYWNlKC9cXG4vZywgJyAnKSwgYnVuZGxlSUQpO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
