'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _asyncLock = require('async-lock');

var _asyncLock2 = _interopRequireDefault(_asyncLock);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _nodeSimctl = require('node-simctl');

var _asyncbox = require('asyncbox');

var SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
var startupLock = new _asyncLock2['default']();
var preferencesPlistGuard = new _asyncLock2['default']();

var SimulatorXcode9 = (function (_SimulatorXcode8) {
  _inherits(SimulatorXcode9, _SimulatorXcode8);

  function SimulatorXcode9(udid, xcodeVersion) {
    _classCallCheck(this, SimulatorXcode9);

    _get(Object.getPrototypeOf(SimulatorXcode9.prototype), 'constructor', this).call(this, udid, xcodeVersion);
  }

  _createClass(SimulatorXcode9, [{
    key: 'run',

    /**
     * @typedef {Object} DevicePreferences
     * @property {?number} SimulatorExternalDisplay - TBD. Example value: 2.114
     * @property {?string} ChromeTint - TBD. Example value: ''
     * @property {?number} SimulatorWindowLastScale - Scale value for the particular Simulator window.
     *                                                1.0 means 100% scale.
     * @property {?string} SimulatorWindowOrientation - Simulator window orientation. Possible values are:
     *                                                  'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
     * @property {?number} SimulatorWindowRotationAngle - Window rotation angle. This value is expected to be in sync
     *                                                    with _SimulatorWindowOrientation_. The corresponding values are:
     *                                                    0, 90, 180 and 270.
     * @property {?string} SimulatorWindowCenter - The coordinates of Simulator's window center in pixels,
     *                                             for example '{-1294.5, 775.5}'.
     * @property {?boolean} ConnectHardwareKeyboard - Equals to 1 if hardware keyboard should be connected.
     *                                                Otherwise 0.
     */

    /**
     * @typedef {Object} CommonPreferences
     * @property {boolean} ConnectHardwareKeyboard - Whether to connect hardware keyboard
     */

    /**
     * Executes given Simulator with options. The Simulator will not be restarted if
     * it is already running and the current UI state matches to `isHeadless` option.
     * @override
     *
     * @param {object} opts - One or more of available Simulator options:
     *   - {string} scaleFactor: Any positive float value. 1.0 means 1:1 scale.
     *   Defines the window scale value for the UI client window for the current Simulator.
     *   Equals to `null` by default, which keeps the current scale unchanged.
     *   - {boolean} connectHardwareKeyboard: whether to connect the hardware keyboard to the
     *   Simulator UI client. Equals to `false` by default.
     *   - {number} startupTimeout: number of milliseconds to wait until Simulator booting
     *   process is completed. The default timeout will be used if not set explicitly.
     *   - {boolean} isHeadless: whether to start the Simulator in headless mode (with UI
     *   client invisible). `false` by default.
     *   - {DevicePreferences} devicePreferences: preferences of the newly created Simulator
     *   device
     */
    value: function run() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var commonPreferences, bootSimulator, waitForShutdown, shouldWaitForBoot, startTime;
      return _regeneratorRuntime.async(function run$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            opts = _Object$assign({
              devicePreferences: {},
              isHeadless: false,
              startupTimeout: this.startupTimeout
            }, opts);
            if (opts.scaleFactor) {
              opts.devicePreferences.SimulatorWindowLastScale = parseFloat(opts.scaleFactor);
            }
            // This option is necessary to make the Simulator window follow
            // the actual XCUIDevice orientation
            commonPreferences = {
              RotateWindowWhenSignaledByGuest: true
            };

            if (_lodash2['default'].isBoolean(opts.connectHardwareKeyboard)) {
              opts.devicePreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
              commonPreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
            }

            if (!(!_lodash2['default'].isEmpty(opts.devicePreferences) || !_lodash2['default'].isEmpty(commonPreferences))) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.updatePreferences(opts.devicePreferences, commonPreferences));

          case 7:
            bootSimulator = function bootSimulator() {
              return _regeneratorRuntime.async(function bootSimulator$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _nodeSimctl.bootDevice)(this.udid));

                  case 3:
                    context$3$0.next = 8;
                    break;

                  case 5:
                    context$3$0.prev = 5;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('\'xcrun simctl boot ' + this.udid + '\' command has returned non-zero code. The problem was: ' + context$3$0.t0.stderr);

                  case 8:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[0, 5]]);
            };

            waitForShutdown = function waitForShutdown() {
              return _regeneratorRuntime.async(function waitForShutdown$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$3$0() {
                      var _ref, state;

                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.next = 2;
                            return _regeneratorRuntime.awrap(this.stat());

                          case 2:
                            _ref = context$4$0.sent;
                            state = _ref.state;
                            return context$4$0.abrupt('return', state === 'Shutdown');

                          case 5:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this2);
                    }, { waitMs: SIMULATOR_SHUTDOWN_TIMEOUT, intervalMs: 500 }));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };

            shouldWaitForBoot = true;
            startTime = process.hrtime();
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(startupLock.acquire(this.uiClientBundleId, function callee$2$0() {
              var stat, serverState, isServerRunning, isUIClientRunning;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.stat());

                  case 2:
                    stat = context$3$0.sent;
                    serverState = stat.state;
                    isServerRunning = serverState === 'Booted';
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(this.isUIClientRunning());

                  case 7:
                    isUIClientRunning = context$3$0.sent;

                    if (!opts.isHeadless) {
                      context$3$0.next = 24;
                      break;
                    }

                    if (!(isServerRunning && !isUIClientRunning)) {
                      context$3$0.next = 13;
                      break;
                    }

                    _logger2['default'].info('Simulator with UDID ' + this.udid + ' already booted in headless mode.');
                    shouldWaitForBoot = false;
                    return context$3$0.abrupt('return');

                  case 13:
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(this.killUIClient());

                  case 15:
                    if (!context$3$0.sent) {
                      context$3$0.next = 19;
                      break;
                    }

                    // Stopping the UI client also kills all running servers. Sad but true
                    _logger2['default'].info('Detected the UI client was running and killed it. Verifying the Simulator is in Shutdown state...');
                    context$3$0.next = 19;
                    return _regeneratorRuntime.awrap(waitForShutdown());

                  case 19:
                    _logger2['default'].info('Booting Simulator with UDID ' + this.udid + ' in headless mode. All UI-related capabilities are going to be ignored.');
                    context$3$0.next = 22;
                    return _regeneratorRuntime.awrap(bootSimulator());

                  case 22:
                    context$3$0.next = 47;
                    break;

                  case 24:
                    if (!(isServerRunning && isUIClientRunning)) {
                      context$3$0.next = 28;
                      break;
                    }

                    _logger2['default'].info('Both Simulator with UDID ' + this.udid + ' and the UI client are currently running');
                    shouldWaitForBoot = false;
                    return context$3$0.abrupt('return');

                  case 28:
                    if (!(['Shutdown', 'Booted'].indexOf(serverState) === -1)) {
                      context$3$0.next = 41;
                      break;
                    }

                    if (!(serverState !== 'Shutting Down')) {
                      context$3$0.next = 39;
                      break;
                    }

                    _logger2['default'].info('Simulator ' + this.udid + ' is in \'' + serverState + '\' state. Trying to shutdown...');
                    context$3$0.prev = 31;
                    context$3$0.next = 34;
                    return _regeneratorRuntime.awrap(this.shutdown());

                  case 34:
                    context$3$0.next = 39;
                    break;

                  case 36:
                    context$3$0.prev = 36;
                    context$3$0.t0 = context$3$0['catch'](31);

                    _logger2['default'].warn('Error on Simulator shutdown: ' + context$3$0.t0.message);

                  case 39:
                    context$3$0.next = 41;
                    return _regeneratorRuntime.awrap(waitForShutdown());

                  case 41:
                    _logger2['default'].info('Booting Simulator with UDID ' + this.udid + '...');
                    context$3$0.next = 44;
                    return _regeneratorRuntime.awrap(bootSimulator());

                  case 44:
                    if (isUIClientRunning) {
                      context$3$0.next = 47;
                      break;
                    }

                    context$3$0.next = 47;
                    return _regeneratorRuntime.awrap(this.startUIClient(opts));

                  case 47:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[31, 36]]);
            }));

          case 13:
            if (!shouldWaitForBoot) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.waitForBoot(opts.startupTimeout, bootSimulator));

          case 16:
            _logger2['default'].info('Simulator with UDID ' + this.udid + ' booted in ' + process.hrtime(startTime)[0] + ' seconds');

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Perform verification of device preferences correctness.
     *
     * @param {DevicePreferences} prefs [{}] - The preferences to be verified
     * @throws {Error} If any of the given preference values does not match the expected
     * format.
     */
  }, {
    key: 'verifyDevicePreferences',
    value: function verifyDevicePreferences() {
      var prefs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      if (_lodash2['default'].isEmpty(prefs)) {
        return;
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowLastScale)) {
        if (!_lodash2['default'].isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
          _logger2['default'].errorAndThrow('SimulatorWindowLastScale is expected to be a positive float value. ' + ('\'' + prefs.SimulatorWindowLastScale + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowCenter)) {
        // https://regex101.com/r/2ZXOij/2
        var verificationPattern = /\{\-?\d+(\.\d+)?,\-?\d+(\.\d+)?\}/;
        if (!_lodash2['default'].isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
          _logger2['default'].errorAndThrow('SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ' + ('\'' + prefs.SimulatorWindowCenter + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowOrientation)) {
        var acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];
        if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
          _logger2['default'].errorAndThrow('SimulatorWindowOrientation is expected to be one of ' + acceptableValues + '. ' + ('\'' + prefs.SimulatorWindowOrientation + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowRotationAngle)) {
        if (!_lodash2['default'].isNumber(prefs.SimulatorWindowRotationAngle)) {
          _logger2['default'].errorAndThrow('SimulatorWindowRotationAngle is expected to be a valid number. ' + ('\'' + prefs.SimulatorWindowRotationAngle + '\' is assigned instead.'));
        }
      }
    }

    /**
     * Update the common iOS Simulator preferences file with new values.
     * It is necessary to restart the corresponding Simulator before
     * these changes are applied.
     *
     * @param {DevicePreferences} devicePrefs [{}] - The mapping, which represents new device preference values
     *                                               for the given Simulator.
     * @param {CommonPreferences} commonPrefs [{}] - The mapping, which represents new common preference values
     *                                               for all Simulators.
     * @return {boolean} True if the preferences were successfully updated.
     */
  }, {
    key: 'updatePreferences',
    value: function updatePreferences() {
      var devicePrefs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var commonPrefs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var homeFolderPath, plistPath, newPrefs;
      return _regeneratorRuntime.async(function updatePreferences$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!_lodash2['default'].isEmpty(devicePrefs)) {
              _logger2['default'].debug('Setting preferences of ' + this.udid + ' Simulator to ' + JSON.stringify(devicePrefs));
            }
            if (!_lodash2['default'].isEmpty(commonPrefs)) {
              _logger2['default'].debug('Setting common Simulator preferences to ' + JSON.stringify(commonPrefs));
            }
            homeFolderPath = process.env.HOME;

            if (homeFolderPath) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].warn('Cannot get the path to HOME folder from the process environment. ' + 'Ignoring Simulator preferences update.');
            return context$2$0.abrupt('return', false);

          case 6:
            this.verifyDevicePreferences(devicePrefs);
            plistPath = _path2['default'].resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(plistPath));

          case 10:
            if (context$2$0.sent) {
              context$2$0.next = 13;
              break;
            }

            _logger2['default'].warn('Simulator preferences file \'' + plistPath + '\' is not accessible. ' + 'Ignoring Simulator preferences update.');
            return context$2$0.abrupt('return', false);

          case 13:
            newPrefs = {};

            if (!_lodash2['default'].isEmpty(devicePrefs)) {
              newPrefs.DevicePreferences = _defineProperty({}, this.udid.toUpperCase(), devicePrefs);
            }
            newPrefs = _lodash2['default'].merge(newPrefs, commonPrefs);
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(preferencesPlistGuard.acquire(SimulatorXcode9.name, function callee$2$0() {
              var currentPlistContent;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(plistPath));

                  case 3:
                    currentPlistContent = context$3$0.sent;
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(plistPath, _lodash2['default'].merge(currentPlistContent, newPrefs), true));

                  case 6:
                    _logger2['default'].debug('Updated ' + this.udid + ' Simulator preferences at \'' + plistPath + '\' with ' + JSON.stringify(newPrefs));
                    return context$3$0.abrupt('return', true);

                  case 10:
                    context$3$0.prev = 10;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('Cannot update ' + this.udid + ' Simulator preferences at \'' + plistPath + '\'. ' + ('Try to delete the file manually in order to reset it. Original error: ' + context$3$0.t0.message));
                    return context$3$0.abrupt('return', false);

                  case 14:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 10]]);
            }));

          case 18:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Shut down the current Simulator.
     * @override
     */
  }, {
    key: 'shutdown',
    value: function shutdown() {
      var _ref2, state;

      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.stat());

          case 2:
            _ref2 = context$2$0.sent;
            state = _ref2.state;

            if (!(state === 'Shutdown')) {
              context$2$0.next = 6;
              break;
            }

            return context$2$0.abrupt('return');

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 500, _nodeSimctl.shutdown, this.udid));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Reset the current Simulator to the clean state.
     * @override
     */
  }, {
    key: 'clean',
    value: function clean() {
      return _regeneratorRuntime.async(function clean$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Cleaning simulator ' + this.udid);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.eraseDevice)(this.udid, 10000));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Generate Apple script, which selects the necessary Simulator window
     * if multiple windows are opened.
     * @override
     */
  }, {
    key: 'generateWindowActivationScript',
    value: function generateWindowActivationScript() {
      var _ref3, name, sdk;

      return _regeneratorRuntime.async(function generateWindowActivationScript$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.stat());

          case 2:
            _ref3 = context$2$0.sent;
            name = _ref3.name;
            sdk = _ref3.sdk;
            return context$2$0.abrupt('return', '\n      tell application "System Events"\n        tell process "Simulator"\n          set frontmost to false\n          set frontmost to true\n          click (menu item 1 where (its name contains "' + name + ' -" and its name contains "' + sdk + '")) of menu 1 of menu bar item "Window" of menu bar 1\n        end tell\n      end tell\n    ');

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Return proper biometric menu name object.
     * @param {string} biometricName A key in BIOMETRICS like 'bundleId'
     * @returns {object} Object in BIOMETRICS
     */
  }, {
    key: 'getBiometric',
    value: function getBiometric(biometricName) {
      var BIOMETRICS = SimulatorXcode9.BIOMETRICS;

      if (!BIOMETRICS[biometricName]) {
        throw new Error(biometricName + ' is not a valid biometric. Use one of: ' + JSON.stringify(_lodash2['default'].keys(BIOMETRICS)));
      }
      return BIOMETRICS[biometricName];
    }

    /**
     * Get the current state of a biometric (touch id, face id) enrollment.
     * @override
     */
  }, {
    key: 'isBiometricEnrolled',
    value: function isBiometricEnrolled() {
      var biometricName = arguments.length <= 0 || arguments[0] === undefined ? 'touchId' : arguments[0];

      var _getBiometric, menuName, output;

      return _regeneratorRuntime.async(function isBiometricEnrolled$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _getBiometric = this.getBiometric(biometricName);
            menuName = _getBiometric.menuName;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          set dstMenuItem to menu item "Enrolled" of menu 1 of menu item "' + menuName + '" of menu 1 of menu bar item "Hardware" of menu bar 1\n          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"\n        end tell\n      end tell\n    '));

          case 4:
            output = context$2$0.sent;

            _logger2['default'].debug(menuName + ' enrolled state: ' + output);

            return context$2$0.abrupt('return', _lodash2['default'].isString(output) && output.trim() === 'true');

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Execute a special Apple script, which enrolls biometric (TouchId, FaceId) feature testing in Simulator UI client.
     * @override
     */
  }, {
    key: 'enrollBiometric',
    value: function enrollBiometric() {
      var isEnabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      var biometricName = arguments.length <= 1 || arguments[1] === undefined ? 'touchId' : arguments[1];

      var _getBiometric2, menuName;

      return _regeneratorRuntime.async(function enrollBiometric$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _getBiometric2 = this.getBiometric(biometricName);
            menuName = _getBiometric2.menuName;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          set dstMenuItem to menu item "Enrolled" of menu 1 of menu item "' + menuName + '" of menu 1 of menu bar item "Hardware" of menu bar 1\n          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"\n          if ' + (isEnabled ? 'not ' : '') + 'isChecked then\n            click dstMenuItem\n          end if\n        end tell\n      end tell\n    '));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }], [{
    key: 'BIOMETRICS',
    value: {
      touchId: {
        menuName: 'Touch Id'
      },
      faceId: {
        menuName: 'Face Id'
      }
    },
    enumerable: true
  }]);

  return SimulatorXcode9;
})(_simulatorXcode82['default']);

exports['default'] = SimulatorXcode9;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtOS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUE0QixxQkFBcUI7Ozs7c0JBQ25DLFFBQVE7Ozs7b0JBQ0wsTUFBTTs7Ozs2QkFDRyxnQkFBZ0I7O3lCQUNwQixZQUFZOzs7O3NCQUNsQixVQUFVOzs7OzBCQUMwQyxhQUFhOzt3QkFDakMsVUFBVTs7QUFHMUQsSUFBTSwwQkFBMEIsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzdDLElBQU0sV0FBVyxHQUFHLDRCQUFlLENBQUM7QUFDcEMsSUFBTSxxQkFBcUIsR0FBRyw0QkFBZSxDQUFDOztJQUl4QyxlQUFlO1lBQWYsZUFBZTs7QUFDUCxXQURSLGVBQWUsQ0FDTixJQUFJLEVBQUUsWUFBWSxFQUFFOzBCQUQ3QixlQUFlOztBQUVqQiwrQkFGRSxlQUFlLDZDQUVYLElBQUksRUFBRSxZQUFZLEVBQUU7R0FDM0I7O2VBSEcsZUFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQXNEVDtVQUFDLElBQUkseURBQUcsRUFBRTtVQVdaLGlCQUFpQixFQVVqQixhQUFhLEVBT2IsZUFBZSxFQU1qQixpQkFBaUIsRUFDZixTQUFTOzs7Ozs7QUFsQ2YsZ0JBQUksR0FBRyxlQUFjO0FBQ25CLCtCQUFpQixFQUFFLEVBQUU7QUFDckIsd0JBQVUsRUFBRSxLQUFLO0FBQ2pCLDRCQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7YUFDcEMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNULGdCQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDcEIsa0JBQUksQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2hGOzs7QUFHSyw2QkFBaUIsR0FBRztBQUN4Qiw2Q0FBK0IsRUFBRSxJQUFJO2FBQ3RDOztBQUNELGdCQUFJLG9CQUFFLFNBQVMsQ0FB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LFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssTUFBTTs7Ozs7OztLQUN0RDs7Ozs7Ozs7V0FNcUI7VUFBQyxTQUFTLHlEQUFHLElBQUk7VUFBRSxhQUFhLHlEQUFHLFNBQVM7OzBCQUN6RCxRQUFROzs7Ozs2QkFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUE1QyxvQkFBUSxrQkFBUixRQUFROzs2Q0FDVCxJQUFJLENBQUMscUJBQXFCLDRKQUd3QyxRQUFRLHlLQUVyRSxTQUFTLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQSw2R0FLaEM7Ozs7Ozs7S0FDSDs7O1dBNVRtQjtBQUNsQixhQUFPLEVBQUU7QUFDUCxnQkFBUSxFQUFFLFVBQVU7T0FDckI7QUFDRCxZQUFNLEVBQUU7QUFDTixnQkFBUSxFQUFFLFNBQVM7T0FDcEI7S0FDRjs7OztTQVpHLGVBQWU7OztxQkFvVU4sZUFBZSIsImZpbGUiOiJsaWIvc2ltdWxhdG9yLXhjb2RlLTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2ltdWxhdG9yWGNvZGU4IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMsIHBsaXN0IH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc2h1dGRvd24gYXMgc2ltY3RsU2h1dGRvd24sIGJvb3REZXZpY2UsIGVyYXNlRGV2aWNlIH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiwgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcblxuXG5jb25zdCBTSU1VTEFUT1JfU0hVVERPV05fVElNRU9VVCA9IDE1ICogMTAwMDtcbmNvbnN0IHN0YXJ0dXBMb2NrID0gbmV3IEFzeW5jTG9jaygpO1xuY29uc3QgcHJlZmVyZW5jZXNQbGlzdEd1YXJkID0gbmV3IEFzeW5jTG9jaygpO1xuXG5cblxuY2xhc3MgU2ltdWxhdG9yWGNvZGU5IGV4dGVuZHMgU2ltdWxhdG9yWGNvZGU4IHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIHhjb2RlVmVyc2lvbikge1xuICAgIHN1cGVyKHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gIH1cblxuICBzdGF0aWMgQklPTUVUUklDUyA9IHtcbiAgICB0b3VjaElkOiB7XG4gICAgICBtZW51TmFtZTogJ1RvdWNoIElkJ1xuICAgIH0sXG4gICAgZmFjZUlkOiB7XG4gICAgICBtZW51TmFtZTogJ0ZhY2UgSWQnLFxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gRGV2aWNlUHJlZmVyZW5jZXNcbiAgICogQHByb3BlcnR5IHs/bnVtYmVyfSBTaW11bGF0b3JFeHRlcm5hbERpc3BsYXkgLSBUQkQuIEV4YW1wbGUgdmFsdWU6IDIuMTE0XG4gICAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gQ2hyb21lVGludCAtIFRCRC4gRXhhbXBsZSB2YWx1ZTogJydcbiAgICogQHByb3BlcnR5IHs/bnVtYmVyfSBTaW11bGF0b3JXaW5kb3dMYXN0U2NhbGUgLSBTY2FsZSB2YWx1ZSBmb3IgdGhlIHBhcnRpY3VsYXIgU2ltdWxhdG9yIHdpbmRvdy5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjAgbWVhbnMgMTAwJSBzY2FsZS5cbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBTaW11bGF0b3JXaW5kb3dPcmllbnRhdGlvbiAtIFNpbXVsYXRvciB3aW5kb3cgb3JpZW50YXRpb24uIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUG9ydHJhaXQnLCAnTGFuZHNjYXBlTGVmdCcsICdQb3J0cmFpdFVwc2lkZURvd24nIGFuZCAnTGFuZHNjYXBlUmlnaHQnLlxuICAgKiBAcHJvcGVydHkgez9udW1iZXJ9IFNpbXVsYXRvcldpbmRvd1JvdGF0aW9uQW5nbGUgLSBXaW5kb3cgcm90YXRpb24gYW5nbGUuIFRoaXMgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gc3luY1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIF9TaW11bGF0b3JXaW5kb3dPcmllbnRhdGlvbl8uIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBhcmU6XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDkwLCAxODAgYW5kIDI3MC5cbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBTaW11bGF0b3JXaW5kb3dDZW50ZXIgLSBUaGUgY29vcmRpbmF0ZXMgb2YgU2ltdWxhdG9yJ3Mgd2luZG93IGNlbnRlciBpbiBwaXhlbHMsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGV4YW1wbGUgJ3stMTI5NC41LCA3NzUuNX0nLlxuICAgKiBAcHJvcGVydHkgez9ib29sZWFufSBDb25uZWN0SGFyZHdhcmVLZXlib2FyZCAtIEVxdWFscyB0byAxIGlmIGhhcmR3YXJlIGtleWJvYXJkIHNob3VsZCBiZSBjb25uZWN0ZWQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlIDAuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBDb21tb25QcmVmZXJlbmNlc1xuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IENvbm5lY3RIYXJkd2FyZUtleWJvYXJkIC0gV2hldGhlciB0byBjb25uZWN0IGhhcmR3YXJlIGtleWJvYXJkXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBnaXZlbiBTaW11bGF0b3Igd2l0aCBvcHRpb25zLiBUaGUgU2ltdWxhdG9yIHdpbGwgbm90IGJlIHJlc3RhcnRlZCBpZlxuICAgKiBpdCBpcyBhbHJlYWR5IHJ1bm5pbmcgYW5kIHRoZSBjdXJyZW50IFVJIHN0YXRlIG1hdGNoZXMgdG8gYGlzSGVhZGxlc3NgIG9wdGlvbi5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gT25lIG9yIG1vcmUgb2YgYXZhaWxhYmxlIFNpbXVsYXRvciBvcHRpb25zOlxuICAgKiAgIC0ge3N0cmluZ30gc2NhbGVGYWN0b3I6IEFueSBwb3NpdGl2ZSBmbG9hdCB2YWx1ZS4gMS4wIG1lYW5zIDE6MSBzY2FsZS5cbiAgICogICBEZWZpbmVzIHRoZSB3aW5kb3cgc2NhbGUgdmFsdWUgZm9yIHRoZSBVSSBjbGllbnQgd2luZG93IGZvciB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqICAgRXF1YWxzIHRvIGBudWxsYCBieSBkZWZhdWx0LCB3aGljaCBrZWVwcyB0aGUgY3VycmVudCBzY2FsZSB1bmNoYW5nZWQuXG4gICAqICAgLSB7Ym9vbGVhbn0gY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQ6IHdoZXRoZXIgdG8gY29ubmVjdCB0aGUgaGFyZHdhcmUga2V5Ym9hcmQgdG8gdGhlXG4gICAqICAgU2ltdWxhdG9yIFVJIGNsaWVudC4gRXF1YWxzIHRvIGBmYWxzZWAgYnkgZGVmYXVsdC5cbiAgICogICAtIHtudW1iZXJ9IHN0YXJ0dXBUaW1lb3V0OiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgU2ltdWxhdG9yIGJvb3RpbmdcbiAgICogICBwcm9jZXNzIGlzIGNvbXBsZXRlZC4gVGhlIGRlZmF1bHQgdGltZW91dCB3aWxsIGJlIHVzZWQgaWYgbm90IHNldCBleHBsaWNpdGx5LlxuICAgKiAgIC0ge2Jvb2xlYW59IGlzSGVhZGxlc3M6IHdoZXRoZXIgdG8gc3RhcnQgdGhlIFNpbXVsYXRvciBpbiBoZWFkbGVzcyBtb2RlICh3aXRoIFVJXG4gICAqICAgY2xpZW50IGludmlzaWJsZSkuIGBmYWxzZWAgYnkgZGVmYXVsdC5cbiAgICogICAtIHtEZXZpY2VQcmVmZXJlbmNlc30gZGV2aWNlUHJlZmVyZW5jZXM6IHByZWZlcmVuY2VzIG9mIHRoZSBuZXdseSBjcmVhdGVkIFNpbXVsYXRvclxuICAgKiAgIGRldmljZVxuICAgKi9cbiAgYXN5bmMgcnVuIChvcHRzID0ge30pIHtcbiAgICBvcHRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBkZXZpY2VQcmVmZXJlbmNlczoge30sXG4gICAgICBpc0hlYWRsZXNzOiBmYWxzZSxcbiAgICAgIHN0YXJ0dXBUaW1lb3V0OiB0aGlzLnN0YXJ0dXBUaW1lb3V0LFxuICAgIH0sIG9wdHMpO1xuICAgIGlmIChvcHRzLnNjYWxlRmFjdG9yKSB7XG4gICAgICBvcHRzLmRldmljZVByZWZlcmVuY2VzLlNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSA9IHBhcnNlRmxvYXQob3B0cy5zY2FsZUZhY3Rvcik7XG4gICAgfVxuICAgIC8vIFRoaXMgb3B0aW9uIGlzIG5lY2Vzc2FyeSB0byBtYWtlIHRoZSBTaW11bGF0b3Igd2luZG93IGZvbGxvd1xuICAgIC8vIHRoZSBhY3R1YWwgWENVSURldmljZSBvcmllbnRhdGlvblxuICAgIGNvbnN0IGNvbW1vblByZWZlcmVuY2VzID0ge1xuICAgICAgUm90YXRlV2luZG93V2hlblNpZ25hbGVkQnlHdWVzdDogdHJ1ZVxuICAgIH07XG4gICAgaWYgKF8uaXNCb29sZWFuKG9wdHMuY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQpKSB7XG4gICAgICBvcHRzLmRldmljZVByZWZlcmVuY2VzLkNvbm5lY3RIYXJkd2FyZUtleWJvYXJkID0gb3B0cy5jb25uZWN0SGFyZHdhcmVLZXlib2FyZDtcbiAgICAgIGNvbW1vblByZWZlcmVuY2VzLkNvbm5lY3RIYXJkd2FyZUtleWJvYXJkID0gb3B0cy5jb25uZWN0SGFyZHdhcmVLZXlib2FyZDtcbiAgICB9XG4gICAgaWYgKCFfLmlzRW1wdHkob3B0cy5kZXZpY2VQcmVmZXJlbmNlcykgfHwgIV8uaXNFbXB0eShjb21tb25QcmVmZXJlbmNlcykpIHtcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUHJlZmVyZW5jZXMob3B0cy5kZXZpY2VQcmVmZXJlbmNlcywgY29tbW9uUHJlZmVyZW5jZXMpO1xuICAgIH1cbiAgICBjb25zdCBib290U2ltdWxhdG9yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYm9vdERldmljZSh0aGlzLnVkaWQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKGAneGNydW4gc2ltY3RsIGJvb3QgJHt0aGlzLnVkaWR9JyBjb21tYW5kIGhhcyByZXR1cm5lZCBub24temVybyBjb2RlLiBUaGUgcHJvYmxlbSB3YXM6ICR7ZXJyLnN0ZGVycn1gKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHdhaXRGb3JTaHV0ZG93biA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB7c3RhdGV9ID0gYXdhaXQgdGhpcy5zdGF0KCk7XG4gICAgICAgIHJldHVybiBzdGF0ZSA9PT0gJ1NodXRkb3duJztcbiAgICAgIH0sIHt3YWl0TXM6IFNJTVVMQVRPUl9TSFVURE9XTl9USU1FT1VULCBpbnRlcnZhbE1zOiA1MDB9KTtcbiAgICB9O1xuICAgIGxldCBzaG91bGRXYWl0Rm9yQm9vdCA9IHRydWU7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICBhd2FpdCBzdGFydHVwTG9jay5hY3F1aXJlKHRoaXMudWlDbGllbnRCdW5kbGVJZCwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdCA9IGF3YWl0IHRoaXMuc3RhdCgpO1xuICAgICAgY29uc3Qgc2VydmVyU3RhdGUgPSBzdGF0LnN0YXRlO1xuICAgICAgY29uc3QgaXNTZXJ2ZXJSdW5uaW5nID0gc2VydmVyU3RhdGUgPT09ICdCb290ZWQnO1xuICAgICAgY29uc3QgaXNVSUNsaWVudFJ1bm5pbmcgPSBhd2FpdCB0aGlzLmlzVUlDbGllbnRSdW5uaW5nKCk7XG4gICAgICBpZiAob3B0cy5pc0hlYWRsZXNzKSB7XG4gICAgICAgIGlmIChpc1NlcnZlclJ1bm5pbmcgJiYgIWlzVUlDbGllbnRSdW5uaW5nKSB7XG4gICAgICAgICAgbG9nLmluZm8oYFNpbXVsYXRvciB3aXRoIFVESUQgJHt0aGlzLnVkaWR9IGFscmVhZHkgYm9vdGVkIGluIGhlYWRsZXNzIG1vZGUuYCk7XG4gICAgICAgICAgc2hvdWxkV2FpdEZvckJvb3QgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF3YWl0IHRoaXMua2lsbFVJQ2xpZW50KCkpIHtcbiAgICAgICAgICAvLyBTdG9wcGluZyB0aGUgVUkgY2xpZW50IGFsc28ga2lsbHMgYWxsIHJ1bm5pbmcgc2VydmVycy4gU2FkIGJ1dCB0cnVlXG4gICAgICAgICAgbG9nLmluZm8oYERldGVjdGVkIHRoZSBVSSBjbGllbnQgd2FzIHJ1bm5pbmcgYW5kIGtpbGxlZCBpdC4gVmVyaWZ5aW5nIHRoZSBTaW11bGF0b3IgaXMgaW4gU2h1dGRvd24gc3RhdGUuLi5gKTtcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yU2h1dGRvd24oKTtcbiAgICAgICAgfVxuICAgICAgICBsb2cuaW5mbyhgQm9vdGluZyBTaW11bGF0b3Igd2l0aCBVRElEICR7dGhpcy51ZGlkfSBpbiBoZWFkbGVzcyBtb2RlLiBBbGwgVUktcmVsYXRlZCBjYXBhYmlsaXRpZXMgYXJlIGdvaW5nIHRvIGJlIGlnbm9yZWQuYCk7XG4gICAgICAgIGF3YWl0IGJvb3RTaW11bGF0b3IoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NlcnZlclJ1bm5pbmcgJiYgaXNVSUNsaWVudFJ1bm5pbmcpIHtcbiAgICAgICAgICBsb2cuaW5mbyhgQm90aCBTaW11bGF0b3Igd2l0aCBVRElEICR7dGhpcy51ZGlkfSBhbmQgdGhlIFVJIGNsaWVudCBhcmUgY3VycmVudGx5IHJ1bm5pbmdgKTtcbiAgICAgICAgICBzaG91bGRXYWl0Rm9yQm9vdCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoWydTaHV0ZG93bicsICdCb290ZWQnXS5pbmRleE9mKHNlcnZlclN0YXRlKSA9PT0gLTEpIHtcbiAgICAgICAgICBpZiAoc2VydmVyU3RhdGUgIT09ICdTaHV0dGluZyBEb3duJykge1xuICAgICAgICAgICAgbG9nLmluZm8oYFNpbXVsYXRvciAke3RoaXMudWRpZH0gaXMgaW4gJyR7c2VydmVyU3RhdGV9JyBzdGF0ZS4gVHJ5aW5nIHRvIHNodXRkb3duLi4uYCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNodXRkb3duKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgbG9nLndhcm4oYEVycm9yIG9uIFNpbXVsYXRvciBzaHV0ZG93bjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgd2FpdEZvclNodXRkb3duKCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmluZm8oYEJvb3RpbmcgU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH0uLi5gKTtcbiAgICAgICAgYXdhaXQgYm9vdFNpbXVsYXRvcigpO1xuICAgICAgICBpZiAoIWlzVUlDbGllbnRSdW5uaW5nKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5zdGFydFVJQ2xpZW50KG9wdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkV2FpdEZvckJvb3QpIHtcbiAgICAgIGF3YWl0IHRoaXMud2FpdEZvckJvb3Qob3B0cy5zdGFydHVwVGltZW91dCwgYm9vdFNpbXVsYXRvcik7XG4gICAgICBsb2cuaW5mbyhgU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH0gYm9vdGVkIGluICR7cHJvY2Vzcy5ocnRpbWUoc3RhcnRUaW1lKVswXX0gc2Vjb25kc2ApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHZlcmlmaWNhdGlvbiBvZiBkZXZpY2UgcHJlZmVyZW5jZXMgY29ycmVjdG5lc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7RGV2aWNlUHJlZmVyZW5jZXN9IHByZWZzIFt7fV0gLSBUaGUgcHJlZmVyZW5jZXMgdG8gYmUgdmVyaWZpZWRcbiAgICogQHRocm93cyB7RXJyb3J9IElmIGFueSBvZiB0aGUgZ2l2ZW4gcHJlZmVyZW5jZSB2YWx1ZXMgZG9lcyBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkXG4gICAqIGZvcm1hdC5cbiAgICovXG4gIHZlcmlmeURldmljZVByZWZlcmVuY2VzIChwcmVmcyA9IHt9KSB7XG4gICAgaWYgKF8uaXNFbXB0eShwcmVmcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJlZnMuU2ltdWxhdG9yV2luZG93TGFzdFNjYWxlKSkge1xuICAgICAgaWYgKCFfLmlzTnVtYmVyKHByZWZzLlNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSkgfHwgcHJlZnMuU2ltdWxhdG9yV2luZG93TGFzdFNjYWxlIDw9IDApIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZSBpcyBleHBlY3RlZCB0byBiZSBhIHBvc2l0aXZlIGZsb2F0IHZhbHVlLiBgICtcbiAgICAgICAgICBgJyR7cHJlZnMuU2ltdWxhdG9yV2luZG93TGFzdFNjYWxlfScgaXMgYXNzaWduZWQgaW5zdGVhZC5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJlZnMuU2ltdWxhdG9yV2luZG93Q2VudGVyKSkge1xuICAgICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci8yWlhPaWovMlxuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uUGF0dGVybiA9IC9cXHtcXC0/XFxkKyhcXC5cXGQrKT8sXFwtP1xcZCsoXFwuXFxkKyk/XFx9LztcbiAgICAgIGlmICghXy5pc1N0cmluZyhwcmVmcy5TaW11bGF0b3JXaW5kb3dDZW50ZXIpIHx8ICF2ZXJpZmljYXRpb25QYXR0ZXJuLnRlc3QocHJlZnMuU2ltdWxhdG9yV2luZG93Q2VudGVyKSkge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgU2ltdWxhdG9yV2luZG93Q2VudGVyIGlzIGV4cGVjdGVkIHRvIG1hdGNoIFwie2Zsb2F0WFBvc2l0aW9uLGZsb2F0WVBvc2l0aW9ufVwiIGZvcm1hdCAod2l0aG91dCBzcGFjZXMpLiBgICtcbiAgICAgICAgICBgJyR7cHJlZnMuU2ltdWxhdG9yV2luZG93Q2VudGVyfScgaXMgYXNzaWduZWQgaW5zdGVhZC5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJlZnMuU2ltdWxhdG9yV2luZG93T3JpZW50YXRpb24pKSB7XG4gICAgICBjb25zdCBhY2NlcHRhYmxlVmFsdWVzID0gWydQb3J0cmFpdCcsICdMYW5kc2NhcGVMZWZ0JywgJ1BvcnRyYWl0VXBzaWRlRG93bicsICdMYW5kc2NhcGVSaWdodCddO1xuICAgICAgaWYgKGFjY2VwdGFibGVWYWx1ZXMuaW5kZXhPZihwcmVmcy5TaW11bGF0b3JXaW5kb3dPcmllbnRhdGlvbikgPT09IC0xKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBTaW11bGF0b3JXaW5kb3dPcmllbnRhdGlvbiBpcyBleHBlY3RlZCB0byBiZSBvbmUgb2YgJHthY2NlcHRhYmxlVmFsdWVzfS4gYCArXG4gICAgICAgICAgYCcke3ByZWZzLlNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9ufScgaXMgYXNzaWduZWQgaW5zdGVhZC5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJlZnMuU2ltdWxhdG9yV2luZG93Um90YXRpb25BbmdsZSkpIHtcbiAgICAgIGlmICghXy5pc051bWJlcihwcmVmcy5TaW11bGF0b3JXaW5kb3dSb3RhdGlvbkFuZ2xlKSkge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgU2ltdWxhdG9yV2luZG93Um90YXRpb25BbmdsZSBpcyBleHBlY3RlZCB0byBiZSBhIHZhbGlkIG51bWJlci4gYCArXG4gICAgICAgICAgYCcke3ByZWZzLlNpbXVsYXRvcldpbmRvd1JvdGF0aW9uQW5nbGV9JyBpcyBhc3NpZ25lZCBpbnN0ZWFkLmApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGNvbW1vbiBpT1MgU2ltdWxhdG9yIHByZWZlcmVuY2VzIGZpbGUgd2l0aCBuZXcgdmFsdWVzLlxuICAgKiBJdCBpcyBuZWNlc3NhcnkgdG8gcmVzdGFydCB0aGUgY29ycmVzcG9uZGluZyBTaW11bGF0b3IgYmVmb3JlXG4gICAqIHRoZXNlIGNoYW5nZXMgYXJlIGFwcGxpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RGV2aWNlUHJlZmVyZW5jZXN9IGRldmljZVByZWZzIFt7fV0gLSBUaGUgbWFwcGluZywgd2hpY2ggcmVwcmVzZW50cyBuZXcgZGV2aWNlIHByZWZlcmVuY2UgdmFsdWVzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGdpdmVuIFNpbXVsYXRvci5cbiAgICogQHBhcmFtIHtDb21tb25QcmVmZXJlbmNlc30gY29tbW9uUHJlZnMgW3t9XSAtIFRoZSBtYXBwaW5nLCB3aGljaCByZXByZXNlbnRzIG5ldyBjb21tb24gcHJlZmVyZW5jZSB2YWx1ZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhbGwgU2ltdWxhdG9ycy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJlZmVyZW5jZXMgd2VyZSBzdWNjZXNzZnVsbHkgdXBkYXRlZC5cbiAgICovXG4gIGFzeW5jIHVwZGF0ZVByZWZlcmVuY2VzIChkZXZpY2VQcmVmcyA9IHt9LCBjb21tb25QcmVmcyA9IHt9KSB7XG4gICAgaWYgKCFfLmlzRW1wdHkoZGV2aWNlUHJlZnMpKSB7XG4gICAgICBsb2cuZGVidWcoYFNldHRpbmcgcHJlZmVyZW5jZXMgb2YgJHt0aGlzLnVkaWR9IFNpbXVsYXRvciB0byAke0pTT04uc3RyaW5naWZ5KGRldmljZVByZWZzKX1gKTtcbiAgICB9XG4gICAgaWYgKCFfLmlzRW1wdHkoY29tbW9uUHJlZnMpKSB7XG4gICAgICBsb2cuZGVidWcoYFNldHRpbmcgY29tbW9uIFNpbXVsYXRvciBwcmVmZXJlbmNlcyB0byAke0pTT04uc3RyaW5naWZ5KGNvbW1vblByZWZzKX1gKTtcbiAgICB9XG4gICAgY29uc3QgaG9tZUZvbGRlclBhdGggPSBwcm9jZXNzLmVudi5IT01FO1xuICAgIGlmICghaG9tZUZvbGRlclBhdGgpIHtcbiAgICAgIGxvZy53YXJuKGBDYW5ub3QgZ2V0IHRoZSBwYXRoIHRvIEhPTUUgZm9sZGVyIGZyb20gdGhlIHByb2Nlc3MgZW52aXJvbm1lbnQuIGAgK1xuICAgICAgICBgSWdub3JpbmcgU2ltdWxhdG9yIHByZWZlcmVuY2VzIHVwZGF0ZS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy52ZXJpZnlEZXZpY2VQcmVmZXJlbmNlcyhkZXZpY2VQcmVmcyk7XG4gICAgY29uc3QgcGxpc3RQYXRoID0gcGF0aC5yZXNvbHZlKGhvbWVGb2xkZXJQYXRoLCAnTGlicmFyeScsICdQcmVmZXJlbmNlcycsICdjb20uYXBwbGUuaXBob25lc2ltdWxhdG9yLnBsaXN0Jyk7XG4gICAgaWYgKCFhd2FpdCBmcy5oYXNBY2Nlc3MocGxpc3RQYXRoKSkge1xuICAgICAgbG9nLndhcm4oYFNpbXVsYXRvciBwcmVmZXJlbmNlcyBmaWxlICcke3BsaXN0UGF0aH0nIGlzIG5vdCBhY2Nlc3NpYmxlLiBgICtcbiAgICAgICAgYElnbm9yaW5nIFNpbXVsYXRvciBwcmVmZXJlbmNlcyB1cGRhdGUuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBuZXdQcmVmcyA9IHt9O1xuICAgIGlmICghXy5pc0VtcHR5KGRldmljZVByZWZzKSkge1xuICAgICAgbmV3UHJlZnMuRGV2aWNlUHJlZmVyZW5jZXMgPSB7W3RoaXMudWRpZC50b1VwcGVyQ2FzZSgpXTogZGV2aWNlUHJlZnN9O1xuICAgIH1cbiAgICBuZXdQcmVmcyA9IF8ubWVyZ2UobmV3UHJlZnMsIGNvbW1vblByZWZzKTtcbiAgICByZXR1cm4gYXdhaXQgcHJlZmVyZW5jZXNQbGlzdEd1YXJkLmFjcXVpcmUoU2ltdWxhdG9yWGNvZGU5Lm5hbWUsIGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQbGlzdENvbnRlbnQgPSBhd2FpdCBwbGlzdC5wYXJzZVBsaXN0RmlsZShwbGlzdFBhdGgpO1xuICAgICAgICBhd2FpdCBwbGlzdC51cGRhdGVQbGlzdEZpbGUocGxpc3RQYXRoLCBfLm1lcmdlKGN1cnJlbnRQbGlzdENvbnRlbnQsIG5ld1ByZWZzKSwgdHJ1ZSk7XG4gICAgICAgIGxvZy5kZWJ1ZyhgVXBkYXRlZCAke3RoaXMudWRpZH0gU2ltdWxhdG9yIHByZWZlcmVuY2VzIGF0ICcke3BsaXN0UGF0aH0nIHdpdGggJHtKU09OLnN0cmluZ2lmeShuZXdQcmVmcyl9YCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cud2FybihgQ2Fubm90IHVwZGF0ZSAke3RoaXMudWRpZH0gU2ltdWxhdG9yIHByZWZlcmVuY2VzIGF0ICcke3BsaXN0UGF0aH0nLiBgICtcbiAgICAgICAgICAgICAgICAgYFRyeSB0byBkZWxldGUgdGhlIGZpbGUgbWFudWFsbHkgaW4gb3JkZXIgdG8gcmVzZXQgaXQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNodXQgZG93biB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgc2h1dGRvd24gKCkge1xuICAgIGNvbnN0IHtzdGF0ZX0gPSBhd2FpdCB0aGlzLnN0YXQoKTtcbiAgICBpZiAoc3RhdGUgPT09ICdTaHV0ZG93bicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbCg1LCA1MDAsIHNpbWN0bFNodXRkb3duLCB0aGlzLnVkaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBjdXJyZW50IFNpbXVsYXRvciB0byB0aGUgY2xlYW4gc3RhdGUuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgY2xlYW4gKCkge1xuICAgIGxvZy5pbmZvKGBDbGVhbmluZyBzaW11bGF0b3IgJHt0aGlzLnVkaWR9YCk7XG4gICAgYXdhaXQgZXJhc2VEZXZpY2UodGhpcy51ZGlkLCAxMDAwMCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgQXBwbGUgc2NyaXB0LCB3aGljaCBzZWxlY3RzIHRoZSBuZWNlc3NhcnkgU2ltdWxhdG9yIHdpbmRvd1xuICAgKiBpZiBtdWx0aXBsZSB3aW5kb3dzIGFyZSBvcGVuZWQuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgZ2VuZXJhdGVXaW5kb3dBY3RpdmF0aW9uU2NyaXB0ICgpIHtcbiAgICBjb25zdCB7bmFtZSwgc2RrfSA9IGF3YWl0IHRoaXMuc3RhdCgpO1xuICAgIHJldHVybiBgXG4gICAgICB0ZWxsIGFwcGxpY2F0aW9uIFwiU3lzdGVtIEV2ZW50c1wiXG4gICAgICAgIHRlbGwgcHJvY2VzcyBcIlNpbXVsYXRvclwiXG4gICAgICAgICAgc2V0IGZyb250bW9zdCB0byBmYWxzZVxuICAgICAgICAgIHNldCBmcm9udG1vc3QgdG8gdHJ1ZVxuICAgICAgICAgIGNsaWNrIChtZW51IGl0ZW0gMSB3aGVyZSAoaXRzIG5hbWUgY29udGFpbnMgXCIke25hbWV9IC1cIiBhbmQgaXRzIG5hbWUgY29udGFpbnMgXCIke3Nka31cIikpIG9mIG1lbnUgMSBvZiBtZW51IGJhciBpdGVtIFwiV2luZG93XCIgb2YgbWVudSBiYXIgMVxuICAgICAgICBlbmQgdGVsbFxuICAgICAgZW5kIHRlbGxcbiAgICBgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBwcm9wZXIgYmlvbWV0cmljIG1lbnUgbmFtZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiaW9tZXRyaWNOYW1lIEEga2V5IGluIEJJT01FVFJJQ1MgbGlrZSAnYnVuZGxlSWQnXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCBpbiBCSU9NRVRSSUNTXG4gICAqL1xuICBnZXRCaW9tZXRyaWMgKGJpb21ldHJpY05hbWUpIHtcbiAgICBjb25zdCB7QklPTUVUUklDU30gPSBTaW11bGF0b3JYY29kZTk7XG4gICAgaWYgKCFCSU9NRVRSSUNTW2Jpb21ldHJpY05hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YmlvbWV0cmljTmFtZX0gaXMgbm90IGEgdmFsaWQgYmlvbWV0cmljLiBVc2Ugb25lIG9mOiAke0pTT04uc3RyaW5naWZ5KF8ua2V5cyhCSU9NRVRSSUNTKSl9YCk7XG4gICAgfVxuICAgIHJldHVybiBCSU9NRVRSSUNTW2Jpb21ldHJpY05hbWVdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIGJpb21ldHJpYyAodG91Y2ggaWQsIGZhY2UgaWQpIGVucm9sbG1lbnQuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgaXNCaW9tZXRyaWNFbnJvbGxlZCAoYmlvbWV0cmljTmFtZSA9ICd0b3VjaElkJykge1xuICAgIGNvbnN0IHttZW51TmFtZX0gPSB0aGlzLmdldEJpb21ldHJpYyhiaW9tZXRyaWNOYW1lKTtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVVSUNsaWVudFNjcmlwdChgXG4gICAgICB0ZWxsIGFwcGxpY2F0aW9uIFwiU3lzdGVtIEV2ZW50c1wiXG4gICAgICAgIHRlbGwgcHJvY2VzcyBcIlNpbXVsYXRvclwiXG4gICAgICAgICAgc2V0IGRzdE1lbnVJdGVtIHRvIG1lbnUgaXRlbSBcIkVucm9sbGVkXCIgb2YgbWVudSAxIG9mIG1lbnUgaXRlbSBcIiR7bWVudU5hbWV9XCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJIYXJkd2FyZVwiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgICBzZXQgaXNDaGVja2VkIHRvICh2YWx1ZSBvZiBhdHRyaWJ1dGUgXCJBWE1lbnVJdGVtTWFya0NoYXJcIiBvZiBkc3RNZW51SXRlbSkgaXMgXCLinJNcIlxuICAgICAgICBlbmQgdGVsbFxuICAgICAgZW5kIHRlbGxcbiAgICBgKTtcbiAgICBsb2cuZGVidWcoYCR7bWVudU5hbWV9IGVucm9sbGVkIHN0YXRlOiAke291dHB1dH1gKTtcblxuICAgIHJldHVybiBfLmlzU3RyaW5nKG91dHB1dCkgJiYgb3V0cHV0LnRyaW0oKSA9PT0gJ3RydWUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYSBzcGVjaWFsIEFwcGxlIHNjcmlwdCwgd2hpY2ggZW5yb2xscyBiaW9tZXRyaWMgKFRvdWNoSWQsIEZhY2VJZCkgZmVhdHVyZSB0ZXN0aW5nIGluIFNpbXVsYXRvciBVSSBjbGllbnQuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgZW5yb2xsQmlvbWV0cmljIChpc0VuYWJsZWQgPSB0cnVlLCBiaW9tZXRyaWNOYW1lID0gJ3RvdWNoSWQnKSB7XG4gICAgY29uc3Qge21lbnVOYW1lfSA9IHRoaXMuZ2V0QmlvbWV0cmljKGJpb21ldHJpY05hbWUpO1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVVJQ2xpZW50U2NyaXB0KGBcbiAgICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgICBzZXQgZHN0TWVudUl0ZW0gdG8gbWVudSBpdGVtIFwiRW5yb2xsZWRcIiBvZiBtZW51IDEgb2YgbWVudSBpdGVtIFwiJHttZW51TmFtZX1cIiBvZiBtZW51IDEgb2YgbWVudSBiYXIgaXRlbSBcIkhhcmR3YXJlXCIgb2YgbWVudSBiYXIgMVxuICAgICAgICAgIHNldCBpc0NoZWNrZWQgdG8gKHZhbHVlIG9mIGF0dHJpYnV0ZSBcIkFYTWVudUl0ZW1NYXJrQ2hhclwiIG9mIGRzdE1lbnVJdGVtKSBpcyBcIuKck1wiXG4gICAgICAgICAgaWYgJHtpc0VuYWJsZWQgPyAnbm90ICcgOiAnJ31pc0NoZWNrZWQgdGhlblxuICAgICAgICAgICAgY2xpY2sgZHN0TWVudUl0ZW1cbiAgICAgICAgICBlbmQgaWZcbiAgICAgICAgZW5kIHRlbGxcbiAgICAgIGVuZCB0ZWxsXG4gICAgYCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGU5O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
